<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/src/main/java/com/empresa/erp/controllers/OAuth2Controller.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/com/empresa/erp/controllers/OAuth2Controller.java" />
              <option name="originalContent" value="                .body(Map.of(&quot;error&quot;, &quot;Error generating Google login URL: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/status&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; getOAuthStatus() {&#10;        Map&lt;String, Object&gt; status = new HashMap&lt;&gt;();&#10;&#10;        try {&#10;            ClientRegistration googleClient = clientRegistrationRepository.findByRegistrationId(&quot;google&quot;);&#10;&#10;            if (googleClient != null) {&#10;                status.put(&quot;googleConfigured&quot;, true);&#10;                status.put(&quot;clientId&quot;, googleClient.getClientId());&#10;                status.put(&quot;redirectUri&quot;, googleClient.getRedirectUri());&#10;                status.put(&quot;scopes&quot;, googleClient.getScopes());&#10;            } else {&#10;                status.put(&quot;googleConfigured&quot;, false);&#10;                status.put(&quot;error&quot;, &quot;Google OAuth client not found&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            status.put(&quot;googleConfigured&quot;, false);&#10;            status.put(&quot;error&quot;, e.getMessage());&#10;        }&#10;&#10;        return ResponseEntity.ok(status);&#10;    }&#10;&#10;    @PostMapping(&quot;/debug-error&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; debugOAuthError(&#10;            @RequestParam(required = false) String error,&#10;            @RequestParam(required = false) String error_description,&#10;            HttpServletRequest request) {&#10;&#10;        Map&lt;String, String&gt; debugInfo = new HashMap&lt;&gt;();&#10;        debugInfo.put(&quot;error&quot;, error != null ? error : &quot;no_error_param&quot;);&#10;        debugInfo.put(&quot;error_description&quot;, error_description != null ? error_description : &quot;no_description&quot;);&#10;        debugInfo.put(&quot;timestamp&quot;, String.valueOf(System.currentTimeMillis()));&#10;        debugInfo.put(&quot;requestUrl&quot;, request.getRequestURL().toString());&#10;        debugInfo.put(&quot;queryString&quot;, request.getQueryString() != null ? request.getQueryString() : &quot;none&quot;);&#10;&#10;        System.out.println(&quot;=== OAuth2 Debug Error ===&quot;);&#10;        debugInfo.forEach((key, value) -&gt; System.out.println(key + &quot;: &quot; + value));&#10;&#10;        return ResponseEntity.ok(debugInfo);&#10;    }&#10;}&#10;package com.empresa.erp.controllers;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;&#10;import org.springframework.security.oauth2.client.registration.ClientRegistration;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import java.util.Map;&#10;import java.util.HashMap;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/oauth&quot;)&#10;@CrossOrigin(origins = {&quot;http://localhost:3000&quot;, &quot;http://localhost:3001&quot;})&#10;public class OAuth2Controller {&#10;&#10;    @Autowired&#10;    private ClientRegistrationRepository clientRegistrationRepository;&#10;&#10;    @GetMapping(&quot;/google-login-url&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; getGoogleLoginUrl(HttpServletRequest request) {&#10;        try {&#10;            ClientRegistration googleClient = clientRegistrationRepository.findByRegistrationId(&quot;google&quot;);&#10;&#10;            if (googleClient == null) {&#10;                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Google OAuth client not configured&quot;));&#10;            }&#10;&#10;            String baseUrl = request.getScheme() + &quot;://&quot; + request.getServerName() + &quot;:&quot; + request.getServerPort();&#10;            String authUrl = baseUrl + &quot;/oauth2/authorization/google&quot;;&#10;&#10;            Map&lt;String, String&gt; response = new HashMap&lt;&gt;();&#10;            response.put(&quot;authUrl&quot;, authUrl);&#10;            response.put(&quot;clientId&quot;, googleClient.getClientId());&#10;            response.put(&quot;redirectUri&quot;, googleClient.getRedirectUri());&#10;&#10;            return ResponseEntity.ok(response);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;" />
              <option name="updatedContent" value="package com.empresa.erp.controllers;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;&#10;import org.springframework.security.oauth2.client.registration.ClientRegistration;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import java.util.Map;&#10;import java.util.HashMap;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/oauth&quot;)&#10;@CrossOrigin(origins = {&quot;http://localhost:3000&quot;, &quot;http://localhost:3001&quot;})&#10;public class OAuth2Controller {&#10;&#10;    @Autowired&#10;    private ClientRegistrationRepository clientRegistrationRepository;&#10;&#10;    @GetMapping(&quot;/google-login-url&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; getGoogleLoginUrl(HttpServletRequest request) {&#10;        try {&#10;            ClientRegistration googleClient = clientRegistrationRepository.findByRegistrationId(&quot;google&quot;);&#10;            &#10;            if (googleClient == null) {&#10;                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Google OAuth client not configured&quot;));&#10;            }&#10;            &#10;            String baseUrl = request.getScheme() + &quot;://&quot; + request.getServerName() + &quot;:&quot; + request.getServerPort();&#10;            String authUrl = baseUrl + &quot;/oauth2/authorization/google&quot;;&#10;            &#10;            Map&lt;String, String&gt; response = new HashMap&lt;&gt;();&#10;            response.put(&quot;authUrl&quot;, authUrl);&#10;            response.put(&quot;clientId&quot;, googleClient.getClientId());&#10;            response.put(&quot;redirectUri&quot;, googleClient.getRedirectUri());&#10;            &#10;            return ResponseEntity.ok(response);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                .body(Map.of(&quot;error&quot;, &quot;Error generating Google login URL: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/status&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; getOAuthStatus() {&#10;        Map&lt;String, Object&gt; status = new HashMap&lt;&gt;();&#10;        &#10;        try {&#10;            ClientRegistration googleClient = clientRegistrationRepository.findByRegistrationId(&quot;google&quot;);&#10;            &#10;            if (googleClient != null) {&#10;                status.put(&quot;googleConfigured&quot;, true);&#10;                status.put(&quot;clientId&quot;, googleClient.getClientId());&#10;                status.put(&quot;redirectUri&quot;, googleClient.getRedirectUri());&#10;                status.put(&quot;scopes&quot;, googleClient.getScopes());&#10;            } else {&#10;                status.put(&quot;googleConfigured&quot;, false);&#10;                status.put(&quot;error&quot;, &quot;Google OAuth client not found&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            status.put(&quot;googleConfigured&quot;, false);&#10;            status.put(&quot;error&quot;, e.getMessage());&#10;        }&#10;        &#10;        return ResponseEntity.ok(status);&#10;    }&#10;&#10;    @PostMapping(&quot;/debug-error&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; debugOAuthError(&#10;            @RequestParam(required = false) String error,&#10;            @RequestParam(required = false) String error_description,&#10;            HttpServletRequest request) {&#10;        &#10;        Map&lt;String, String&gt; debugInfo = new HashMap&lt;&gt;();&#10;        debugInfo.put(&quot;error&quot;, error != null ? error : &quot;no_error_param&quot;);&#10;        debugInfo.put(&quot;error_description&quot;, error_description != null ? error_description : &quot;no_description&quot;);&#10;        debugInfo.put(&quot;timestamp&quot;, String.valueOf(System.currentTimeMillis()));&#10;        debugInfo.put(&quot;requestUrl&quot;, request.getRequestURL().toString());&#10;        debugInfo.put(&quot;queryString&quot;, request.getQueryString() != null ? request.getQueryString() : &quot;none&quot;);&#10;        &#10;        System.out.println(&quot;=== OAuth2 Debug Error ===&quot;);&#10;        debugInfo.forEach((key, value) -&gt; System.out.println(key + &quot;: &quot; + value));&#10;        &#10;        return ResponseEntity.ok(debugInfo);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/resources/application.properties" />
              <option name="originalContent" value="spring.datasource.url=jdbc:mysql://localhost:3306/erp_sena&#10;spring.datasource.username=root&#10;spring.datasource.password=&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=true&#10;spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect&#10;server.port=8081&#10;jwt.secret=QwErTyUiOpAsDfGhJkLzXcVbNm1234567890!@#&#10;&#10;# OAuth2 Configuration for Google&#10;spring.security.oauth2.client.registration.google.client-id=1020550477577-p2agvl0se7daqnfv9k0vijg05fs1ol0d.apps.googleusercontent.com&#10;spring.security.oauth2.client.registration.google.client-secret=GOCSPX-your-actual-client-secret-here&#10;spring.security.oauth2.client.registration.google.scope=openid,email,profile&#10;spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8081/login/oauth2/code/google&#10;spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code&#10;&#10;# Provider configuration&#10;spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth&#10;spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token&#10;spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v2/userinfo&#10;spring.security.oauth2.client.provider.google.user-name-attribute=email&#10;&#10;# Logging for debugging OAuth2&#10;logging.level.org.springframework.security=DEBUG&#10;logging.level.org.springframework.security.oauth2=DEBUG&#10;logging.level.org.springframework.web=DEBUG&#10;" />
              <option name="updatedContent" value="spring.datasource.url=jdbc:mysql://localhost:3306/erp_sena&#10;spring.datasource.username=root&#10;spring.datasource.password=&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=true&#10;spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect&#10;server.port=8081&#10;jwt.secret=QwErTyUiOpAsDfGhJkLzXcVbNm1234567890!@#&#10;&#10;# OAuth2 Configuration for Google&#10;spring.security.oauth2.client.registration.google.client-id=1020550477577-p2agvl0se7daqnfv9k0vijg05fs1ol0d.apps.googleusercontent.com&#10;spring.security.oauth2.client.registration.google.client-secret=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&#10;spring.security.oauth2.client.registration.google.scope=openid,email,profile&#10;spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8081/login/oauth2/code/google&#10;spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code&#10;&#10;# Provider configuration&#10;spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth&#10;spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token&#10;spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v2/userinfo&#10;spring.security.oauth2.client.provider.google.user-name-attribute=email&#10;&#10;# Logging for debugging OAuth2&#10;logging.level.org.springframework.security=DEBUG&#10;logging.level.org.springframework.security.oauth2=DEBUG&#10;logging.level.org.springframework.web=DEBUG" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>