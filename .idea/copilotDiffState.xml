<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/src/main/java/com/empresa/erp/config/SecurityConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/com/empresa/erp/config/SecurityConfig.java" />
              <option name="originalContent" value="package com.empresa.erp.config;&#10;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&#10;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;&#10;import org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl;&#10;import org.springframework.security.access.hierarchicalroles.RoleHierarchy;&#10;import org.springframework.http.HttpMethod;&#10;import com.empresa.erp.config.RateLimitFilter;&#10;import org.springframework.web.cors.CorsConfiguration;&#10;import org.springframework.web.cors.CorsConfigurationSource;&#10;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;&#10;import java.util.Arrays;&#10;import org.springframework.security.web.authentication.AuthenticationSuccessHandler;&#10;import org.springframework.security.oauth2.core.user.OAuth2User;&#10;import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;&#10;import org.springframework.security.core.Authentication;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.ServletException;&#10;import java.io.IOException;&#10;import com.empresa.erp.services.AuthService;&#10;import com.empresa.erp.services.UsuarioService;&#10;import com.empresa.erp.models.Usuario;&#10;import java.util.Map;&#10;import jakarta.servlet.Filter;&#10;import jakarta.servlet.FilterChain;&#10;import jakarta.servlet.http.HttpSession;&#10;import org.springframework.core.annotation.Order;&#10;import org.springframework.web.filter.OncePerRequestFilter;&#10;import org.springframework.security.web.AuthenticationEntryPoint;&#10;import org.springframework.security.web.access.AccessDeniedHandler;&#10;import org.springframework.security.web.access.AccessDeniedHandlerImpl;&#10;import org.springframework.security.web.authentication.HttpStatusEntryPoint;&#10;import org.springframework.http.HttpStatus;&#10;import jakarta.servlet.http.Cookie;&#10;&#10;@Configuration&#10;@EnableMethodSecurity&#10;public class SecurityConfig {&#10;&#10;    @Autowired&#10;    private JwtAuthenticationFilter jwtAuthenticationFilter;&#10;&#10;    @Autowired&#10;    private RateLimitFilter rateLimitFilter;&#10;&#10;    @Autowired&#10;    private AuthService authService;&#10;&#10;    @Autowired&#10;    private UsuarioService usuarioService;&#10;&#10;    @Bean&#10;    public RoleHierarchy roleHierarchy() {&#10;        RoleHierarchyImpl roleHierarchy = new RoleHierarchyImpl();&#10;        // ADMIN &gt; SUPERVISOR &gt; USER&#10;        roleHierarchy.setHierarchy(&quot;ROLE_ADMIN &gt; ROLE_SUPERVISOR \n ROLE_SUPERVISOR &gt; ROLE_USER&quot;);&#10;        return roleHierarchy;&#10;    }&#10;&#10;    @Bean&#10;    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {&#10;        http&#10;            .csrf(csrf -&gt; csrf.disable())&#10;            .cors(cors -&gt; cors.configurationSource(corsConfigurationSource()))&#10;            .authorizeHttpRequests(auth -&gt; auth&#10;                .requestMatchers(&quot;/&quot;).permitAll()&#10;                .requestMatchers(&quot;/api&quot;).permitAll()&#10;                .requestMatchers(&quot;/api/auth/**&quot;).permitAll()&#10;                .requestMatchers(&quot;/oauth2/**&quot;).permitAll()&#10;                .requestMatchers(&quot;/login/oauth2/code/**&quot;).permitAll()&#10;                .requestMatchers(&quot;/oauth/**&quot;).permitAll()&#10;                .requestMatchers(&quot;/api/test/**&quot;).permitAll()&#10;                .requestMatchers(&quot;/api/files/**&quot;).permitAll() // &lt;-- permite imágenes públicas&#10;                .requestMatchers(&quot;/api/compras/test&quot;).permitAll() // &lt;-- endpoint de prueba público&#10;                .requestMatchers(&quot;/api/compras/test-simple&quot;).permitAll() // &lt;-- endpoint de prueba simple&#10;                .requestMatchers(&quot;/api/compras/diagnostico&quot;).permitAll() // &lt;-- endpoint de diagnóstico público&#10;                .requestMatchers(&quot;/api/compras/demo&quot;).permitAll() // &lt;-- endpoint demo completamente público&#10;                .requestMatchers(&quot;/api/compras/public&quot;).authenticated() // &lt;-- endpoint público temporal&#10;                .requestMatchers(&quot;/api/usuarios/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(&quot;/api/reportes/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.GET, &quot;/api/productos/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;, &quot;USER&quot;)&#10;                .requestMatchers(HttpMethod.POST, &quot;/api/productos/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.PUT, &quot;/api/productos/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.DELETE, &quot;/api/productos/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.GET, &quot;/api/clientes/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;, &quot;USER&quot;)&#10;                .requestMatchers(HttpMethod.POST, &quot;/api/clientes/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.PUT, &quot;/api/clientes/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.DELETE, &quot;/api/clientes/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.GET, &quot;/api/pedidos/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;, &quot;USER&quot;)&#10;                .requestMatchers(HttpMethod.POST, &quot;/api/pedidos/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.PUT, &quot;/api/pedidos/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.DELETE, &quot;/api/pedidos/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.GET, &quot;/api/proveedores/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.POST, &quot;/api/proveedores/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.PUT, &quot;/api/proveedores/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.DELETE, &quot;/api/proveedores/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.GET, &quot;/api/compras/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.POST, &quot;/api/compras/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.PUT, &quot;/api/compras/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.DELETE, &quot;/api/compras/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.GET, &quot;/api/movimientos-inventario/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.POST, &quot;/api/movimientos-inventario/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.PUT, &quot;/api/movimientos-inventario/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.DELETE, &quot;/api/movimientos-inventario/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(&quot;/api/auth/login&quot;, &quot;/api/auth/refresh&quot;, &quot;/api/auth/verify-recaptcha&quot;).permitAll()&#10;                .requestMatchers(&quot;/api/auth/me&quot;).authenticated()&#10;                .anyRequest().authenticated()&#10;            )&#10;            .logout(logout -&gt; logout&#10;                .logoutUrl(&quot;/logout&quot;)&#10;                .logoutSuccessHandler((request, response, authentication) -&gt; {&#10;                    // Invalida la sesión&#10;                    if (request.getSession(false) != null) {&#10;                        request.getSession(false).invalidate();&#10;                    }&#10;                    // Borra la cookie JSESSIONID&#10;                    jakarta.servlet.http.Cookie cookie = new jakarta.servlet.http.Cookie(&quot;JSESSIONID&quot;, null);&#10;                    cookie.setPath(&quot;/&quot;);&#10;                    cookie.setHttpOnly(true);&#10;                    cookie.setMaxAge(0);&#10;                    response.addCookie(cookie);&#10;&#10;                    response.setStatus(HttpStatus.OK.value());&#10;                    response.setContentType(&quot;application/json&quot;);&#10;                    response.getWriter().write(&quot;{\&quot;message\&quot;: \&quot;Logout exitoso\&quot;}&quot;);&#10;                })&#10;            )&#10;            .oauth2Login(oauth2 -&gt; oauth2&#10;                .successHandler(oAuth2SuccessHandler())&#10;                .failureUrl(&quot;http://localhost:3001/login?error=oauth_failed&quot;)&#10;            )&#10;            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class)&#10;            .addFilterBefore(rateLimitFilter, JwtAuthenticationFilter.class)&#10;            .exceptionHandling(exception -&gt; exception&#10;                .authenticationEntryPoint(new HttpStatusEntryPoint(HttpStatus.UNAUTHORIZED))&#10;                .accessDeniedHandler((request, response, accessDeniedException) -&gt; {&#10;                    response.setStatus(HttpStatus.FORBIDDEN.value());&#10;                    response.setContentType(&quot;application/json&quot;);&#10;                    response.getWriter().write(&quot;{\&quot;error\&quot;: \&quot;Forbidden\&quot;}&quot;);&#10;                })&#10;            );&#10;        return http.build();&#10;    }&#10;&#10;    @Bean&#10;    public SecurityFilterChain oauth2FilterChain(HttpSecurity http) throws Exception {&#10;        http&#10;            .securityMatcher(&quot;/oauth2/**&quot;, &quot;/login/oauth2/**&quot;)&#10;            .csrf(csrf -&gt; csrf.disable())&#10;            .cors(cors -&gt; cors.configurationSource(corsConfigurationSource()))&#10;            .authorizeHttpRequests(auth -&gt; auth&#10;                .anyRequest().permitAll()&#10;            )&#10;            .oauth2Login(oauth2 -&gt; oauth2&#10;                .successHandler(oAuth2SuccessHandler())&#10;                .failureUrl(&quot;http://localhost:3001/login?error=oauth_failed&quot;)&#10;            );&#10;        &#10;        return http.build();&#10;    }&#10;&#10;    @Bean&#10;    public CorsConfigurationSource corsConfigurationSource() {&#10;        CorsConfiguration configuration = new CorsConfiguration();&#10;        configuration.setAllowedOriginPatterns(Arrays.asList(&quot;*&quot;)); // Permitir todos los orígenes para desarrollo&#10;        configuration.setAllowedOrigins(Arrays.asList(&quot;http://localhost:3000&quot;, &quot;http://localhost:3001&quot;, &quot;https://accounts.google.com&quot;));&#10;        configuration.setAllowedMethods(Arrays.asList(&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;, &quot;HEAD&quot;));&#10;        configuration.setAllowedHeaders(Arrays.asList(&quot;*&quot;));&#10;        configuration.setAllowCredentials(true);&#10;        configuration.setExposedHeaders(Arrays.asList(&quot;Authorization&quot;, &quot;Content-Type&quot;));&#10;        configuration.setMaxAge(3600L); // Cache preflight por 1 hora&#10;&#10;        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();&#10;        source.registerCorsConfiguration(&quot;/**&quot;, configuration);&#10;        return source;&#10;    }&#10;&#10;    @Bean&#10;    public AuthenticationSuccessHandler oAuth2SuccessHandler() {&#10;        return new AuthenticationSuccessHandler() {&#10;            @Override&#10;            public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {&#10;                System.out.println(&quot;=== OAuth2 Success Handler Called ===&quot;);&#10;                System.out.println(&quot;Authentication type: &quot; + authentication.getClass().getSimpleName());&#10;                &#10;                if (authentication instanceof OAuth2AuthenticationToken oauthToken) {&#10;                    OAuth2User oauth2User = oauthToken.getPrincipal();&#10;                    String email = oauth2User.getAttribute(&quot;email&quot;);&#10;                    String nombre = oauth2User.getAttribute(&quot;name&quot;);&#10;                    &#10;                    System.out.println(&quot;OAuth2 User Email: &quot; + email);&#10;                    System.out.println(&quot;OAuth2 User Name: &quot; + nombre);&#10;                    &#10;                    Usuario usuario = usuarioService.findAll().stream()&#10;                        .filter(u -&gt; u.getCorreo().equalsIgnoreCase(email))&#10;                        .findFirst()&#10;                        .orElseGet(() -&gt; {&#10;                            System.out.println(&quot;Creating new user for email: &quot; + email);&#10;                            Usuario nuevo = new Usuario();&#10;                            nuevo.setCorreo(email);&#10;                            nuevo.setNombre(nombre);&#10;                            nuevo.setRol(&quot;USER&quot;);&#10;                            nuevo.setPassword(&quot;&quot;);&#10;                            return usuarioService.save(nuevo);&#10;                        });&#10;                    &#10;                    System.out.println(&quot;User found/created: &quot; + usuario.getCorreo() + &quot; with role: &quot; + usuario.getRol());&#10;                    &#10;                    Map&lt;String, String&gt; tokens = authService.generateTokens(usuario);&#10;                    String jwt = tokens.get(&quot;token&quot;);&#10;                    String refreshToken = tokens.get(&quot;refreshToken&quot;);&#10;                    &#10;                    System.out.println(&quot;JWT generated: &quot; + (jwt != null ? &quot;YES&quot; : &quot;NO&quot;));&#10;                    System.out.println(&quot;RefreshToken generated: &quot; + (refreshToken != null ? &quot;YES&quot; : &quot;NO&quot;));&#10;                    &#10;                    // Set cookies for JWT and RefreshToken&#10;                    jakarta.servlet.http.Cookie jwtCookie = new jakarta.servlet.http.Cookie(&quot;jwt&quot;, jwt);&#10;                    jwtCookie.setPath(&quot;/&quot;);&#10;                    jwtCookie.setHttpOnly(true);&#10;                    jwtCookie.setMaxAge(60 * 60 * 24); // 1 día&#10;                    response.addCookie(jwtCookie);&#10;&#10;                    jakarta.servlet.http.Cookie refreshCookie = new jakarta.servlet.http.Cookie(&quot;refreshToken&quot;, refreshToken);&#10;                    refreshCookie.setPath(&quot;/&quot;);&#10;                    refreshCookie.setHttpOnly(true);&#10;                    refreshCookie.setMaxAge(60 * 60 * 24 * 7); // 7 días&#10;                    response.addCookie(refreshCookie);&#10;&#10;                    String redirectUrl = &quot;http://localhost:3001/dashboard&quot;;&#10;                    System.out.println(&quot;Redirecting to: &quot; + redirectUrl);&#10;&#10;                    response.sendRedirect(redirectUrl);&#10;                } else {&#10;                    System.out.println(&quot;Authentication is not OAuth2AuthenticationToken: &quot; + authentication.getClass().getName());&#10;                    response.sendRedirect(&quot;http://localhost:3001/login?error=oauth_failed&quot;);&#10;                }&#10;            }&#10;        };&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.empresa.erp.config;&#10;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&#10;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;&#10;import org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl;&#10;import org.springframework.security.access.hierarchicalroles.RoleHierarchy;&#10;import org.springframework.http.HttpMethod;&#10;import com.empresa.erp.config.RateLimitFilter;&#10;import org.springframework.web.cors.CorsConfiguration;&#10;import org.springframework.web.cors.CorsConfigurationSource;&#10;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;&#10;import java.util.Arrays;&#10;import org.springframework.security.web.authentication.AuthenticationSuccessHandler;&#10;import org.springframework.security.oauth2.core.user.OAuth2User;&#10;import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;&#10;import org.springframework.security.core.Authentication;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.ServletException;&#10;import java.io.IOException;&#10;import com.empresa.erp.services.AuthService;&#10;import com.empresa.erp.services.UsuarioService;&#10;import com.empresa.erp.models.Usuario;&#10;import java.util.Map;&#10;import jakarta.servlet.Filter;&#10;import jakarta.servlet.FilterChain;&#10;import jakarta.servlet.http.HttpSession;&#10;import org.springframework.core.annotation.Order;&#10;import org.springframework.web.filter.OncePerRequestFilter;&#10;import org.springframework.security.web.AuthenticationEntryPoint;&#10;import org.springframework.security.web.access.AccessDeniedHandler;&#10;import org.springframework.security.web.access.AccessDeniedHandlerImpl;&#10;import org.springframework.security.web.authentication.HttpStatusEntryPoint;&#10;import org.springframework.http.HttpStatus;&#10;import jakarta.servlet.http.Cookie;&#10;&#10;@Configuration&#10;@EnableMethodSecurity&#10;public class SecurityConfig {&#10;&#10;    @Autowired&#10;    private JwtAuthenticationFilter jwtAuthenticationFilter;&#10;&#10;    @Autowired&#10;    private RateLimitFilter rateLimitFilter;&#10;&#10;    @Autowired&#10;    private AuthService authService;&#10;&#10;    @Autowired&#10;    private UsuarioService usuarioService;&#10;&#10;    @Bean&#10;    public RoleHierarchy roleHierarchy() {&#10;        RoleHierarchyImpl roleHierarchy = new RoleHierarchyImpl();&#10;        // ADMIN &gt; SUPERVISOR &gt; USER&#10;        roleHierarchy.setHierarchy(&quot;ROLE_ADMIN &gt; ROLE_SUPERVISOR \n ROLE_SUPERVISOR &gt; ROLE_USER&quot;);&#10;        return roleHierarchy;&#10;    }&#10;&#10;    @Bean&#10;    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {&#10;        http&#10;            .csrf(csrf -&gt; csrf.disable())&#10;            .cors(cors -&gt; cors.configurationSource(corsConfigurationSource()))&#10;            .authorizeHttpRequests(auth -&gt; auth&#10;                .requestMatchers(&quot;/&quot;).permitAll()&#10;                .requestMatchers(&quot;/api&quot;).permitAll()&#10;                .requestMatchers(&quot;/api/auth/**&quot;).permitAll()&#10;                .requestMatchers(&quot;/oauth2/**&quot;).permitAll()&#10;                .requestMatchers(&quot;/login/oauth2/code/**&quot;).permitAll()&#10;                .requestMatchers(&quot;/oauth/**&quot;).permitAll()&#10;                .requestMatchers(&quot;/api/test/**&quot;).permitAll()&#10;                .requestMatchers(&quot;/api/files/**&quot;).permitAll() // &lt;-- permite imágenes públicas&#10;                .requestMatchers(&quot;/api/compras/test&quot;).permitAll() // &lt;-- endpoint de prueba público&#10;                .requestMatchers(&quot;/api/compras/test-simple&quot;).permitAll() // &lt;-- endpoint de prueba simple&#10;                .requestMatchers(&quot;/api/compras/diagnostico&quot;).permitAll() // &lt;-- endpoint de diagnóstico público&#10;                .requestMatchers(&quot;/api/compras/demo&quot;).permitAll() // &lt;-- endpoint demo completamente público&#10;                .requestMatchers(&quot;/api/compras/public&quot;).authenticated() // &lt;-- endpoint público temporal&#10;                .requestMatchers(&quot;/api/usuarios/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(&quot;/api/reportes/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.GET, &quot;/api/productos/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;, &quot;USER&quot;)&#10;                .requestMatchers(HttpMethod.POST, &quot;/api/productos/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.PUT, &quot;/api/productos/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.DELETE, &quot;/api/productos/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.GET, &quot;/api/clientes/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;, &quot;USER&quot;)&#10;                .requestMatchers(HttpMethod.POST, &quot;/api/clientes/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.PUT, &quot;/api/clientes/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.DELETE, &quot;/api/clientes/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.GET, &quot;/api/pedidos/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;, &quot;USER&quot;)&#10;                .requestMatchers(HttpMethod.POST, &quot;/api/pedidos/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.PUT, &quot;/api/pedidos/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.DELETE, &quot;/api/pedidos/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.GET, &quot;/api/proveedores/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.POST, &quot;/api/proveedores/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.PUT, &quot;/api/proveedores/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.DELETE, &quot;/api/proveedores/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.GET, &quot;/api/compras/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.POST, &quot;/api/compras/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.PUT, &quot;/api/compras/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.DELETE, &quot;/api/compras/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.GET, &quot;/api/movimientos-inventario/**&quot;).hasAnyRole(&quot;ADMIN&quot;, &quot;SUPERVISOR&quot;)&#10;                .requestMatchers(HttpMethod.POST, &quot;/api/movimientos-inventario/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.PUT, &quot;/api/movimientos-inventario/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(HttpMethod.DELETE, &quot;/api/movimientos-inventario/**&quot;).hasRole(&quot;ADMIN&quot;)&#10;                .requestMatchers(&quot;/api/auth/login&quot;, &quot;/api/auth/refresh&quot;, &quot;/api/auth/verify-recaptcha&quot;).permitAll()&#10;                .requestMatchers(&quot;/api/auth/me&quot;).authenticated()&#10;                .anyRequest().authenticated()&#10;            )&#10;            .logout(logout -&gt; logout&#10;                .logoutUrl(&quot;/logout&quot;)&#10;                .logoutSuccessHandler((request, response, authentication) -&gt; {&#10;                    // Invalida la sesión&#10;                    if (request.getSession(false) != null) {&#10;                        request.getSession(false).invalidate();&#10;                    }&#10;                    // Borra la cookie JSESSIONID&#10;                    jakarta.servlet.http.Cookie cookie = new jakarta.servlet.http.Cookie(&quot;JSESSIONID&quot;, null);&#10;                    cookie.setPath(&quot;/&quot;);&#10;                    cookie.setHttpOnly(true);&#10;                    cookie.setMaxAge(0);&#10;                    response.addCookie(cookie);&#10;&#10;                    response.setStatus(HttpStatus.OK.value());&#10;                    response.setContentType(&quot;application/json&quot;);&#10;                    response.getWriter().write(&quot;{\&quot;message\&quot;: \&quot;Logout exitoso\&quot;}&quot;);&#10;                })&#10;            )&#10;            .oauth2Login(oauth2 -&gt; oauth2&#10;                .successHandler(oAuth2SuccessHandler())&#10;                .failureUrl(&quot;http://localhost:3001/login?error=oauth_failed&quot;)&#10;            )&#10;            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class)&#10;            .addFilterBefore(rateLimitFilter, JwtAuthenticationFilter.class)&#10;            .exceptionHandling(exception -&gt; exception&#10;                .authenticationEntryPoint(new HttpStatusEntryPoint(HttpStatus.UNAUTHORIZED))&#10;                .accessDeniedHandler((request, response, accessDeniedException) -&gt; {&#10;                    response.setStatus(HttpStatus.FORBIDDEN.value());&#10;                    response.setContentType(&quot;application/json&quot;);&#10;                    response.getWriter().write(&quot;{\&quot;error\&quot;: \&quot;Forbidden\&quot;}&quot;);&#10;                })&#10;            );&#10;        return http.build();&#10;    }&#10;&#10;    @Bean&#10;    public SecurityFilterChain oauth2FilterChain(HttpSecurity http) throws Exception {&#10;        http&#10;            .securityMatcher(&quot;/oauth2/**&quot;, &quot;/login/oauth2/**&quot;)&#10;            .csrf(csrf -&gt; csrf.disable())&#10;            .cors(cors -&gt; cors.configurationSource(corsConfigurationSource()))&#10;            .authorizeHttpRequests(auth -&gt; auth&#10;                .anyRequest().permitAll()&#10;            )&#10;            .oauth2Login(oauth2 -&gt; oauth2&#10;                .successHandler(oAuth2SuccessHandler())&#10;                .failureUrl(&quot;http://localhost:3001/login?error=oauth_failed&quot;)&#10;            );&#10;        &#10;        return http.build();&#10;    }&#10;&#10;    @Bean&#10;    public CorsConfigurationSource corsConfigurationSource() {&#10;        CorsConfiguration configuration = new CorsConfiguration();&#10;        configuration.setAllowedOriginPatterns(Arrays.asList(&quot;*&quot;)); // Permitir todos los orígenes para desarrollo&#10;        configuration.setAllowedOrigins(Arrays.asList(&quot;http://localhost:3000&quot;, &quot;http://localhost:3001&quot;, &quot;https://accounts.google.com&quot;));&#10;        configuration.setAllowedMethods(Arrays.asList(&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;, &quot;HEAD&quot;));&#10;        configuration.setAllowedHeaders(Arrays.asList(&quot;*&quot;));&#10;        configuration.setAllowCredentials(true);&#10;        configuration.setExposedHeaders(Arrays.asList(&quot;Authorization&quot;, &quot;Content-Type&quot;));&#10;        configuration.setMaxAge(3600L); // Cache preflight por 1 hora&#10;&#10;        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();&#10;        source.registerCorsConfiguration(&quot;/**&quot;, configuration);&#10;        return source;&#10;    }&#10;&#10;    @Bean&#10;    public AuthenticationSuccessHandler oAuth2SuccessHandler() {&#10;        return new AuthenticationSuccessHandler() {&#10;            @Override&#10;            public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {&#10;                System.out.println(&quot;=== OAuth2 Success Handler Called ===&quot;);&#10;                System.out.println(&quot;Authentication type: &quot; + authentication.getClass().getSimpleName());&#10;                &#10;                if (authentication instanceof OAuth2AuthenticationToken oauthToken) {&#10;                    OAuth2User oauth2User = oauthToken.getPrincipal();&#10;                    String email = oauth2User.getAttribute(&quot;email&quot;);&#10;                    String nombre = oauth2User.getAttribute(&quot;name&quot;);&#10;                    &#10;                    System.out.println(&quot;OAuth2 User Email: &quot; + email);&#10;                    System.out.println(&quot;OAuth2 User Name: &quot; + nombre);&#10;                    &#10;                    Usuario usuario = usuarioService.findAll().stream()&#10;                        .filter(u -&gt; u.getCorreo().equalsIgnoreCase(email))&#10;                        .findFirst()&#10;                        .orElseGet(() -&gt; {&#10;                            System.out.println(&quot;Creating new user for email: &quot; + email);&#10;                            Usuario nuevo = new Usuario();&#10;                            nuevo.setCorreo(email);&#10;                            nuevo.setNombre(nombre);&#10;                            nuevo.setRol(&quot;USER&quot;);&#10;                            nuevo.setPassword(&quot;&quot;);&#10;                            return usuarioService.save(nuevo);&#10;                        });&#10;                    &#10;                    System.out.println(&quot;User found/created: &quot; + usuario.getCorreo() + &quot; with role: &quot; + usuario.getRol());&#10;                    &#10;                    Map&lt;String, String&gt; tokens = authService.generateTokens(usuario);&#10;                    String jwt = tokens.get(&quot;token&quot;);&#10;                    String refreshToken = tokens.get(&quot;refreshToken&quot;);&#10;                    &#10;                    System.out.println(&quot;JWT generated: &quot; + (jwt != null ? &quot;YES&quot; : &quot;NO&quot;));&#10;                    System.out.println(&quot;RefreshToken generated: &quot; + (refreshToken != null ? &quot;YES&quot; : &quot;NO&quot;));&#10;                    &#10;                    // Set cookies for JWT and RefreshToken con configuración corregida&#10;                    jakarta.servlet.http.Cookie jwtCookie = new jakarta.servlet.http.Cookie(&quot;jwt&quot;, jwt);&#10;                    jwtCookie.setPath(&quot;/&quot;);&#10;                    jwtCookie.setHttpOnly(false); // Permitir acceso desde JavaScript&#10;                    jwtCookie.setSecure(false); // Para localhost HTTP&#10;                    jwtCookie.setDomain(&quot;localhost&quot;); // Configurar dominio específicamente&#10;                    jwtCookie.setMaxAge(60 * 60 * 24); // 1 día&#10;                    response.addCookie(jwtCookie);&#10;&#10;                    jakarta.servlet.http.Cookie refreshCookie = new jakarta.servlet.http.Cookie(&quot;refreshToken&quot;, refreshToken);&#10;                    refreshCookie.setPath(&quot;/&quot;);&#10;                    refreshCookie.setHttpOnly(false); // Permitir acceso desde JavaScript&#10;                    refreshCookie.setSecure(false); // Para localhost HTTP&#10;                    refreshCookie.setDomain(&quot;localhost&quot;); // Configurar dominio específicamente&#10;                    refreshCookie.setMaxAge(60 * 60 * 24 * 7); // 7 días&#10;                    response.addCookie(refreshCookie);&#10;&#10;                    // También agregar el token como parámetro en la URL de redirección&#10;                    String redirectUrl = &quot;http://localhost:3001/dashboard?token=&quot; + jwt + &quot;&amp;refreshToken=&quot; + refreshToken;&#10;                    System.out.println(&quot;Redirecting to: &quot; + redirectUrl);&#10;&#10;                    response.sendRedirect(redirectUrl);&#10;                } else {&#10;                    System.out.println(&quot;Authentication is not OAuth2AuthenticationToken: &quot; + authentication.getClass().getName());&#10;                    response.sendRedirect(&quot;http://localhost:3001/login?error=oauth_failed&quot;);&#10;                }&#10;            }&#10;        };&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/java/com/empresa/erp/controllers/OAuth2Controller.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/com/empresa/erp/controllers/OAuth2Controller.java" />
              <option name="originalContent" value="                .body(Map.of(&quot;error&quot;, &quot;Error generating Google login URL: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/status&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; getOAuthStatus() {&#10;        Map&lt;String, Object&gt; status = new HashMap&lt;&gt;();&#10;&#10;        try {&#10;            ClientRegistration googleClient = clientRegistrationRepository.findByRegistrationId(&quot;google&quot;);&#10;&#10;            if (googleClient != null) {&#10;                status.put(&quot;googleConfigured&quot;, true);&#10;                status.put(&quot;clientId&quot;, googleClient.getClientId());&#10;                status.put(&quot;redirectUri&quot;, googleClient.getRedirectUri());&#10;                status.put(&quot;scopes&quot;, googleClient.getScopes());&#10;            } else {&#10;                status.put(&quot;googleConfigured&quot;, false);&#10;                status.put(&quot;error&quot;, &quot;Google OAuth client not found&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            status.put(&quot;googleConfigured&quot;, false);&#10;            status.put(&quot;error&quot;, e.getMessage());&#10;        }&#10;&#10;        return ResponseEntity.ok(status);&#10;    }&#10;&#10;    @PostMapping(&quot;/debug-error&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; debugOAuthError(&#10;            @RequestParam(required = false) String error,&#10;            @RequestParam(required = false) String error_description,&#10;            HttpServletRequest request) {&#10;&#10;        Map&lt;String, String&gt; debugInfo = new HashMap&lt;&gt;();&#10;        debugInfo.put(&quot;error&quot;, error != null ? error : &quot;no_error_param&quot;);&#10;        debugInfo.put(&quot;error_description&quot;, error_description != null ? error_description : &quot;no_description&quot;);&#10;        debugInfo.put(&quot;timestamp&quot;, String.valueOf(System.currentTimeMillis()));&#10;        debugInfo.put(&quot;requestUrl&quot;, request.getRequestURL().toString());&#10;        debugInfo.put(&quot;queryString&quot;, request.getQueryString() != null ? request.getQueryString() : &quot;none&quot;);&#10;&#10;        System.out.println(&quot;=== OAuth2 Debug Error ===&quot;);&#10;        debugInfo.forEach((key, value) -&gt; System.out.println(key + &quot;: &quot; + value));&#10;&#10;        return ResponseEntity.ok(debugInfo);&#10;    }&#10;}&#10;package com.empresa.erp.controllers;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;&#10;import org.springframework.security.oauth2.client.registration.ClientRegistration;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import java.util.Map;&#10;import java.util.HashMap;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/oauth&quot;)&#10;@CrossOrigin(origins = {&quot;http://localhost:3000&quot;, &quot;http://localhost:3001&quot;})&#10;public class OAuth2Controller {&#10;&#10;    @Autowired&#10;    private ClientRegistrationRepository clientRegistrationRepository;&#10;&#10;    @GetMapping(&quot;/google-login-url&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; getGoogleLoginUrl(HttpServletRequest request) {&#10;        try {&#10;            ClientRegistration googleClient = clientRegistrationRepository.findByRegistrationId(&quot;google&quot;);&#10;&#10;            if (googleClient == null) {&#10;                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Google OAuth client not configured&quot;));&#10;            }&#10;&#10;            String baseUrl = request.getScheme() + &quot;://&quot; + request.getServerName() + &quot;:&quot; + request.getServerPort();&#10;            String authUrl = baseUrl + &quot;/oauth2/authorization/google&quot;;&#10;&#10;            Map&lt;String, String&gt; response = new HashMap&lt;&gt;();&#10;            response.put(&quot;authUrl&quot;, authUrl);&#10;            response.put(&quot;clientId&quot;, googleClient.getClientId());&#10;            response.put(&quot;redirectUri&quot;, googleClient.getRedirectUri());&#10;&#10;            return ResponseEntity.ok(response);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;" />
              <option name="updatedContent" value="package com.empresa.erp.controllers;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;&#10;import org.springframework.security.oauth2.client.registration.ClientRegistration;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import java.util.Map;&#10;import java.util.HashMap;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/oauth&quot;)&#10;@CrossOrigin(origins = {&quot;http://localhost:3000&quot;, &quot;http://localhost:3001&quot;})&#10;public class OAuth2Controller {&#10;&#10;    @Autowired&#10;    private ClientRegistrationRepository clientRegistrationRepository;&#10;&#10;    @GetMapping(&quot;/google-login-url&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; getGoogleLoginUrl(HttpServletRequest request) {&#10;        try {&#10;            ClientRegistration googleClient = clientRegistrationRepository.findByRegistrationId(&quot;google&quot;);&#10;            &#10;            if (googleClient == null) {&#10;                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Google OAuth client not configured&quot;));&#10;            }&#10;            &#10;            String baseUrl = request.getScheme() + &quot;://&quot; + request.getServerName() + &quot;:&quot; + request.getServerPort();&#10;            String authUrl = baseUrl + &quot;/oauth2/authorization/google&quot;;&#10;            &#10;            Map&lt;String, String&gt; response = new HashMap&lt;&gt;();&#10;            response.put(&quot;authUrl&quot;, authUrl);&#10;            response.put(&quot;clientId&quot;, googleClient.getClientId());&#10;            response.put(&quot;redirectUri&quot;, googleClient.getRedirectUri());&#10;            &#10;            return ResponseEntity.ok(response);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                .body(Map.of(&quot;error&quot;, &quot;Error generating Google login URL: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/status&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; getOAuthStatus() {&#10;        Map&lt;String, Object&gt; status = new HashMap&lt;&gt;();&#10;        &#10;        try {&#10;            ClientRegistration googleClient = clientRegistrationRepository.findByRegistrationId(&quot;google&quot;);&#10;            &#10;            if (googleClient != null) {&#10;                status.put(&quot;googleConfigured&quot;, true);&#10;                status.put(&quot;clientId&quot;, googleClient.getClientId());&#10;                status.put(&quot;redirectUri&quot;, googleClient.getRedirectUri());&#10;                status.put(&quot;scopes&quot;, googleClient.getScopes());&#10;            } else {&#10;                status.put(&quot;googleConfigured&quot;, false);&#10;                status.put(&quot;error&quot;, &quot;Google OAuth client not found&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            status.put(&quot;googleConfigured&quot;, false);&#10;            status.put(&quot;error&quot;, e.getMessage());&#10;        }&#10;        &#10;        return ResponseEntity.ok(status);&#10;    }&#10;&#10;    @PostMapping(&quot;/debug-error&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; debugOAuthError(&#10;            @RequestParam(required = false) String error,&#10;            @RequestParam(required = false) String error_description,&#10;            HttpServletRequest request) {&#10;        &#10;        Map&lt;String, String&gt; debugInfo = new HashMap&lt;&gt;();&#10;        debugInfo.put(&quot;error&quot;, error != null ? error : &quot;no_error_param&quot;);&#10;        debugInfo.put(&quot;error_description&quot;, error_description != null ? error_description : &quot;no_description&quot;);&#10;        debugInfo.put(&quot;timestamp&quot;, String.valueOf(System.currentTimeMillis()));&#10;        debugInfo.put(&quot;requestUrl&quot;, request.getRequestURL().toString());&#10;        debugInfo.put(&quot;queryString&quot;, request.getQueryString() != null ? request.getQueryString() : &quot;none&quot;);&#10;        &#10;        System.out.println(&quot;=== OAuth2 Debug Error ===&quot;);&#10;        debugInfo.forEach((key, value) -&gt; System.out.println(key + &quot;: &quot; + value));&#10;        &#10;        return ResponseEntity.ok(debugInfo);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/resources/application.properties" />
              <option name="originalContent" value="spring.datasource.url=jdbc:mysql://localhost:3306/erp_sena&#10;spring.datasource.username=root&#10;spring.datasource.password=&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=true&#10;spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect&#10;server.port=8081&#10;jwt.secret=QwErTyUiOpAsDfGhJkLzXcVbNm1234567890!@#&#10;&#10;# OAuth2 Configuration for Google&#10;spring.security.oauth2.client.registration.google.client-id=1020550477577-p2agvl0se7daqnfv9k0vijg05fs1ol0d.apps.googleusercontent.com&#10;spring.security.oauth2.client.registration.google.client-secret=GOCSPX-your-actual-client-secret-here&#10;spring.security.oauth2.client.registration.google.scope=openid,email,profile&#10;spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8081/login/oauth2/code/google&#10;spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code&#10;&#10;# Provider configuration&#10;spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth&#10;spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token&#10;spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v2/userinfo&#10;spring.security.oauth2.client.provider.google.user-name-attribute=email&#10;&#10;# Logging for debugging OAuth2&#10;logging.level.org.springframework.security=DEBUG&#10;logging.level.org.springframework.security.oauth2=DEBUG&#10;logging.level.org.springframework.web=DEBUG&#10;" />
              <option name="updatedContent" value="spring.datasource.url=jdbc:mysql://localhost:3306/erp_sena&#10;spring.datasource.username=root&#10;spring.datasource.password=&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=true&#10;spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect&#10;server.port=8081&#10;jwt.secret=QwErTyUiOpAsDfGhJkLzXcVbNm1234567890!@#&#10;&#10;# OAuth2 Configuration for Google&#10;spring.security.oauth2.client.registration.google.client-id=1020550477577-p2agvl0se7daqnfv9k0vijg05fs1ol0d.apps.googleusercontent.com&#10;spring.security.oauth2.client.registration.google.client-secret=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&#10;spring.security.oauth2.client.registration.google.scope=openid,email,profile&#10;spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8081/login/oauth2/code/google&#10;spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code&#10;&#10;# Provider configuration&#10;spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth&#10;spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token&#10;spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v2/userinfo&#10;spring.security.oauth2.client.provider.google.user-name-attribute=email&#10;&#10;# Logging for debugging OAuth2&#10;logging.level.org.springframework.security=DEBUG&#10;logging.level.org.springframework.security.oauth2=DEBUG&#10;logging.level.org.springframework.web=DEBUG" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend-erp/src/pages/DashboardPage.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend-erp/src/pages/DashboardPage.js" />
              <option name="originalContent" value="    fetchDashboardData();&#10;  };&#10;&#10;  // Colores para PieChart&#10;  const pieColors = ['#1976d2', '#10b981', '#fbc02d', '#e53935', '#ff9800', '#8e24aa'];&#10;&#10;  // Utilidad para iconos y colores por estado&#10;  const estadoConfig = {&#10;    'Pendiente': { icon: '', color: '#fbc02d' },&#10;    'PENDIENTE': { icon: '', color: '#fbc02d' },&#10;    'Enviado': { icon: '', color: '#1976d2' },&#10;    'ENVIADO': { icon: '', color: '#1976d2' },&#10;    'Entregado': { icon: '✅', color: '#10b981' },&#10;    'ENTREGADO': { icon: '✅', color: '#10b981' },&#10;    'Cancelado': { icon: '❌', color: '#e53935' },&#10;    'CANCELADO': { icon: '❌', color: '#e53935' },&#10;    'Completado': { icon: '✔️', color: '#43a047' },&#10;    'completado': { icon: '✔️', color: '#43a047' },&#10;    'pendiente': { icon: '', color: '#fbc02d' }&#10;  };&#10;&#10;  // Calcular total de pedidos&#10;  const totalPedidos = pedidosPorEstado.reduce((acc, p) =&gt; acc + (p.cantidad || 0), 0);&#10;&#10;  // Agrupar estados ignorando mayúsculas/minúsculas&#10;  const groupedEstados = pedidosPorEstado.reduce((acc, curr) =&gt; {&#10;    const key = curr.estado.trim().toLowerCase();&#10;    if (!acc[key]) {&#10;      acc[key] = { ...curr, estado: curr.estado.charAt(0).toUpperCase() + curr.estado.slice(1).toLowerCase(), cantidad: 0 };&#10;    }&#10;    acc[key].cantidad += curr.cantidad;&#10;    return acc;&#10;  }, {});&#10;  const estadosUnicos = Object.values(groupedEstados);&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;Layout title=&quot;Dashboard&quot; subtitle=&quot;Cargando datos...&quot;&gt;&#10;        &lt;div className=&quot;dashboard-container&quot;&gt;&#10;          &lt;div className=&quot;loading-spinner&quot;&gt;&#10;            &lt;i className=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt;&#10;            &lt;p&gt;Cargando dashboard...&lt;/p&gt;&#10;import React, { useState, useEffect } from 'react';&#10;import { useLocation, useNavigate } from 'react-router-dom';&#10;      &lt;/Layout&gt;&#10;    );&#10;  }&#10;import Layout from '../components/Layout';&#10;  if (error) {&#10;    return (&#10;      &lt;Layout title=&quot;Dashboard&quot; subtitle=&quot;Error&quot;&gt;&#10;        &lt;div className=&quot;dashboard-container&quot;&gt;&#10;          &lt;div className=&quot;error-message&quot;&gt;&#10;            &lt;i className=&quot;fas fa-exclamation-triangle&quot;&gt;&lt;/i&gt;&#10;            &lt;p&gt;{error}&lt;/p&gt;&#10;            &lt;button onClick={fetchDashboardData}&gt;Reintentar&lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/Layout&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;Layout title=&quot;Dashboard&quot; subtitle=&quot;Métricas y Reportes del Sistema&quot;&gt;&#10;      &lt;div className=&quot;dashboard-container&quot;&gt;&#10;        &lt;IndicadoresWidget /&gt;&#10;&#10;        {/* Filtro de fechas */}&#10;        &lt;div className=&quot;filter-section&quot;&gt;&#10;          &lt;h2&gt;Filtrar por Fechas&lt;/h2&gt;&#10;          &lt;div className=&quot;filter-grid&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;fecha-inicio&quot;&gt;Fecha Inicio:&lt;/label&gt;&#10;              &lt;input&#10;                type=&quot;date&quot;&#10;                id=&quot;fecha-inicio&quot;&#10;                value={fechaInicio}&#10;                onChange={(e) =&gt; setFechaInicio(e.target.value)}&#10;              /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;fecha-fin&quot;&gt;Fecha Fin:&lt;/label&gt;&#10;              &lt;input&#10;                type=&quot;date&quot;&#10;                id=&quot;fecha-fin&quot;&#10;                value={fechaFin}&#10;                onChange={(e) =&gt; setFechaFin(e.target.value)}&#10;              /&gt;&#10;        const clientes = await clientesRes.json();&#10;            &lt;div className=&quot;filter-button&quot;&gt;&#10;              &lt;button onClick={handleFiltrar}&gt;Filtrar&lt;/button&gt;&#10;&#10;        {/* Tabla de ingresos por mes */}&#10;        &lt;div className=&quot;table-card full-width&quot;&gt;&#10;          &lt;h2 className=&quot;ventas-title&quot;&gt;Ingresos por Mes&lt;/h2&gt;&#10;        {/* Tarjetas de estadísticas */}&#10;        &lt;div className=&quot;stats-grid&quot;&gt;&#10;          &lt;div className=&quot;stat-card blue&quot;&gt;&#10;            &lt;div className=&quot;stat-header&quot;&gt;&#10;              &lt;div className=&quot;stat-icon&quot;&gt;&#10;                &lt;i className=&quot;fas fa-dollar-sign&quot;&gt;&lt;/i&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;stat-trend positive&quot;&gt;&#10;                &lt;i className=&quot;fas fa-arrow-up&quot;&gt;&lt;/i&gt;&#10;                +12.5%&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;stat-content&quot;&gt;&#10;              &lt;p className=&quot;stat-main-value&quot;&gt;${(dashboardData?.ventasMes || 0).toLocaleString()}&lt;/p&gt;&#10;              &lt;p className=&quot;stat-label&quot;&gt;Ventas del Mes&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;stat-card green&quot;&gt;&#10;            &lt;div className=&quot;stat-header&quot;&gt;&#10;              &lt;div className=&quot;stat-icon&quot;&gt;&#10;                &lt;i className=&quot;fas fa-shopping-cart&quot;&gt;&lt;/i&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;stat-trend negative&quot;&gt;&#10;                &lt;i className=&quot;fas fa-arrow-down&quot;&gt;&lt;/i&gt;&#10;                -5.2%&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;stat-content&quot;&gt;&#10;              &lt;p className=&quot;stat-main-value&quot;&gt;{dashboardData?.pedidosPendientes || 0}&lt;/p&gt;&#10;              &lt;p className=&quot;stat-label&quot;&gt;Pedidos Pendientes&lt;/p&gt;&#10;                    strokeWidth={3}&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;stat-card yellow&quot;&gt;&#10;            &lt;div className=&quot;stat-header&quot;&gt;&#10;              &lt;div className=&quot;stat-icon&quot;&gt;&#10;                &lt;i className=&quot;fas fa-exclamation-triangle&quot;&gt;&lt;/i&gt;&#10;              &lt;/div&gt;&#10;              &lt;h2 className=&quot;inventario-title&quot;&gt;Rotación de Inventario por Categoría&lt;/h2&gt;&#10;            &lt;div className=&quot;stat-content&quot;&gt;&#10;              &lt;p className=&quot;stat-main-value&quot;&gt;{alertasStock.length}&lt;/p&gt;&#10;              &lt;p className=&quot;stat-label&quot;&gt;Alertas de Stock&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;                  { categoria: 'Electrónicos', rotacion: 8.5 },&#10;          &lt;div className=&quot;stat-card red&quot;&gt;&#10;            &lt;div className=&quot;stat-header&quot;&gt;&#10;              &lt;div className=&quot;stat-icon&quot;&gt;&#10;                &lt;i className=&quot;fas fa-user-plus&quot;&gt;&lt;/i&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;stat-content&quot;&gt;&#10;              &lt;p className=&quot;stat-main-value&quot;&gt;{dashboardData?.clientesNuevos || 0}&lt;/p&gt;&#10;              &lt;p className=&quot;stat-label&quot;&gt;Clientes Nuevos&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Alertas de Stock Bajo */}&#10;        {alertasStock.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;alert-section&quot;&gt;&#10;            &lt;h2&gt;&lt;i className=&quot;fas fa-exclamation-triangle&quot;&gt;&lt;/i&gt; Alertas de Stock Bajo&lt;/h2&gt;&#10;            &lt;div className=&quot;alert-grid&quot;&gt;&#10;              {alertasStock.map((producto, index) =&gt; (&#10;                &lt;div key={index} className=&quot;alert-card&quot;&gt;&#10;                  &lt;div className=&quot;alert-header&quot;&gt;&#10;                    &lt;h3&gt;{producto.nombre}&lt;/h3&gt;&#10;                    &lt;span className=&quot;stock-badge critical&quot;&gt;Stock Crítico&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;alert-content&quot;&gt;&#10;                    &lt;p&gt;&lt;strong&gt;Stock Actual:&lt;/strong&gt; {producto.stockActual} unidades&lt;/p&gt;&#10;                    &lt;p&gt;&lt;strong&gt;Stock Mínimo:&lt;/strong&gt; {producto.stockMinimo} unidades&lt;/p&gt;&#10;                    &lt;p&gt;&lt;strong&gt;Proveedor:&lt;/strong&gt; {producto.proveedor || 'No especificado'}&lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;alert-actions&quot;&gt;&#10;                    &lt;button className=&quot;btn-primary&quot; onClick={() =&gt; navigate('/inventario')}&gt;&#10;                      &lt;i className=&quot;fas fa-plus&quot;&gt;&lt;/i&gt; Reponer Stock&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;                    &lt;th&gt;Fecha Vencimiento&lt;/th&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Tablas de información */}&#10;        &lt;div className=&quot;tables-grid enhanced&quot;&gt;&#10;          &lt;div className=&quot;table-card&quot;&gt;&#10;            &lt;h2 className=&quot;productos-title&quot;&gt;Productos Más Vendidos&lt;/h2&gt;&#10;            &lt;table&gt;&#10;              &lt;thead&gt;&#10;                &lt;tr&gt;&#10;                  &lt;th&gt;Producto&lt;/th&gt;&#10;                  &lt;th&gt;Precio&lt;/th&gt;&#10;                  &lt;th&gt;Cantidad Vendida&lt;/th&gt;&#10;                  &lt;th&gt;Ingreso Total&lt;/th&gt;&#10;                &lt;/tr&gt;&#10;              &lt;/thead&gt;&#10;              &lt;tbody&gt;&#10;                {productosMasVendidos.length &gt; 0 ? (&#10;                  productosMasVendidos.map((producto, index) =&gt; (&#10;                    &lt;tr key={index}&gt;&#10;                      &lt;td&gt;{producto.nombre}&lt;/td&gt;&#10;                      &lt;td&gt;${producto.precio?.toFixed(2) || '0.00'}&lt;/td&gt;&#10;                      &lt;td&gt;{producto.cantidadVendida}&lt;/td&gt;&#10;                      &lt;td&gt;${producto.ingreso?.toFixed(2) || '0.00'}&lt;/td&gt;&#10;                    &lt;/tr&gt;&#10;                  ))&#10;                ) : (&#10;                  &lt;tr&gt;&lt;td colSpan=&quot;4&quot;&gt;No hay datos de productos vendidos.&lt;/td&gt;&lt;/tr&gt;&#10;                )}&#10;              &lt;/tbody&gt;&#10;            &lt;/table&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;table-card enhanced&quot;&gt;&#10;            &lt;h2 className=&quot;pedidos-title&quot;&gt;Pedidos por Estado&lt;/h2&gt;&#10;            &lt;table className=&quot;pedidos-estado-table&quot;&gt;&#10;              &lt;thead&gt;&#10;                &lt;tr&gt;&#10;                  &lt;th&gt;Estado&lt;/th&gt;&#10;                  &lt;th&gt;Cantidad&lt;/th&gt;&#10;                  &lt;th&gt;% del total&lt;/th&gt;&#10;                  &lt;th&gt;Acciones&lt;/th&gt;&#10;                &lt;/tr&gt;&#10;              &lt;/thead&gt;&#10;              &lt;tbody&gt;&#10;                {estadosUnicos.length &gt; 0 ? (&#10;                  estadosUnicos.map((pedido, index) =&gt; {&#10;                    const config = estadoConfig[pedido.estado] || { icon: '', color: '#bdbdbd' };&#10;                    const porcentaje = totalPedidos &gt; 0 ? ((pedido.cantidad / totalPedidos) * 100).toFixed(1) : 0;&#10;                    return (&#10;                      &lt;tr key={index}&gt;&#10;                        &lt;td style={{ color: config.color, fontWeight: 600 }}&gt;&#10;                          &lt;span style={{ fontSize: '1.3rem', marginRight: 8 }}&gt;{config.icon}&lt;/span&gt;&#10;                          {pedido.estado}&#10;                        &lt;/td&gt;&#10;                        &lt;td style={{ fontWeight: 600 }}&gt;{pedido.cantidad}&lt;/td&gt;&#10;                        &lt;td&gt;&#10;                          &lt;div className=&quot;progress-bar-bg&quot;&gt;&#10;                            &lt;div className=&quot;progress-bar-fill&quot; style={{ width: `${porcentaje}%`, background: config.color }}&gt;&lt;/div&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;span style={{ fontSize: '0.95rem', color: '#555' }}&gt;{porcentaje}%&lt;/span&gt;&#10;                        &lt;/td&gt;&#10;                        &lt;td&gt;&#10;                          &lt;button className=&quot;btn-filter&quot; onClick={() =&gt; navigate(`/pedidos?estado=${encodeURIComponent(pedido.estado)}`)}&gt;&#10;                            Ver pedidos&#10;                          &lt;/button&gt;&#10;                        &lt;/td&gt;&#10;                      &lt;/tr&gt;&#10;                    );&#10;                  })&#10;                ) : (&#10;                  &lt;tr&gt;&lt;td colSpan=&quot;4&quot;&gt;No hay datos de pedidos por estado.&lt;/td&gt;&lt;/tr&gt;&#10;                )}&#10;              &lt;/tbody&gt;&#10;            &lt;/table&gt;&#10;                    contentStyle={{&#10;                      backgroundColor: 'rgba(255, 255, 255, 0.95)',&#10;                      border: '1px solid #e2e8f0',&#10;        {/* Gráficos */}&#10;        &lt;div className=&quot;charts-grid enhanced&quot;&gt;&#10;          &lt;div className=&quot;chart-card&quot;&gt;&#10;            &lt;h2 className=&quot;ventas-title&quot;&gt;Ingresos por Mes&lt;/h2&gt;&#10;            {ingresosPorMes &amp;&amp; ingresosPorMes.length &gt; 0 ? (&#10;              &lt;ResponsiveContainer width=&quot;100%&quot; height={350}&gt;&#10;                &lt;LineChart data={ingresosPorMes} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}&gt;&#10;                    dataKey=&quot;gastos&quot;&#10;                    stroke=&quot;#ef4444&quot; &#10;                    name=&quot;Gastos&quot; &#10;                    formatter={(value) =&gt; [`$${value?.toFixed(2) || '0.00'}`, 'Ingreso']}&#10;                    height={80}&#10;                    fontSize={11}&#10;                  /&gt;&#10;                  &lt;YAxis stroke=&quot;#1976d2&quot; fontSize={12}/&gt;&#10;                  &lt;Tooltip &#10;                    formatter={(value) =&gt; [`$${value?.toLocaleString()}`, 'Volumen']}&#10;                    contentStyle={{&#10;                      backgroundColor: 'rgba(255, 255, 255, 0.95)',&#10;                      border: '1px solid #e2e8f0',&#10;                      borderRadius: '8px',&#10;                    dataKey=&quot;ingreso&quot;&#10;                    }}&#10;                    name=&quot;Ingresos&quot;&#10;                  &lt;Bar&#10;                    dataKey=&quot;volumen&quot; &#10;                    activeDot={{ r: 6, stroke: '#1976d2', strokeWidth: 2, fill: '#ffffff' }}&#10;              &lt;h2 className=&quot;proveedores-title&quot;&gt;Rendimiento de Proveedores&lt;/h2&gt;&#10;              &lt;table&gt;&#10;                &lt;thead&gt;&#10;            ) : (&#10;              &lt;div className=&quot;no-data&quot;&gt;No hay datos de ingresos para mostrar&lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;chart-card&quot;&gt;&#10;            &lt;h2 className=&quot;clientes-title&quot;&gt;Clientes Nuevos por Mes&lt;/h2&gt;&#10;            {clientesNuevosPorMes &amp;&amp; clientesNuevosPorMes.length &gt; 0 ? (&#10;              &lt;ResponsiveContainer width=&quot;100%&quot; height={350}&gt;&#10;                &lt;LineChart data={clientesNuevosPorMes} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}&gt;&#10;                  &lt;XAxis dataKey=&quot;mes&quot; stroke=&quot;#10b981&quot; fontSize={12}/&gt;&#10;                  &lt;YAxis stroke=&quot;#10b981&quot; fontSize={12}/&gt;&#10;                    &lt;td&gt;DigitalPro&lt;/td&gt;&#10;                    formatter={(value, name) =&gt; [value, 'Clientes Nuevos']}&#10;                    &lt;td&gt;88%&lt;/td&gt;&#10;                    &lt;td&gt;Bajo&lt;/td&gt;&#10;                  &lt;/tr&gt;&#10;                  &lt;tr&gt;&#10;                    &lt;td&gt;GadgetPlus&lt;/td&gt;&#10;                    &lt;td&gt;5.5 días&lt;/td&gt;&#10;                    &lt;td&gt;85%&lt;/td&gt;&#10;                  &lt;Legend /&gt;&#10;                    name=&quot;Tiempo Promedio&quot;&#10;                    strokeWidth={3}&#10;                    dataKey=&quot;cantidad&quot;&#10;                  /&gt;&#10;                    name=&quot;Clientes Nuevos&quot;&#10;              &lt;/ResponsiveContainer&gt;&#10;            &lt;/div&gt;&#10;                    activeDot={{ r: 6, stroke: '#10b981', strokeWidth: 2, fill: '#ffffff' }}&#10;&#10;            &lt;div className=&quot;chart-card&quot;&gt;&#10;              &lt;h2 className=&quot;operacional-title&quot;&gt;Eficiencia por Departamento&lt;/h2&gt;&#10;            ) : (&#10;              &lt;div className=&quot;no-data&quot;&gt;No hay datos de clientes nuevos para mostrar&lt;/div&gt;&#10;            )}&#10;          &lt;div className=&quot;charts-grid enhanced&quot;&gt;&#10;            &lt;div className=&quot;chart-card&quot;&gt;&#10;                &lt;LineChart data={crearDatosHibridos(datosReales, 'pronosticoVentas')} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}&gt;&#10;                  &lt;XAxis dataKey=&quot;mes&quot; stroke=&quot;#1976d2&quot; fontSize={12}/&gt;&#10;                  &lt;YAxis stroke=&quot;#1976d2&quot; fontSize={12}/&gt;&#10;                  &lt;Tooltip &#10;                    formatter={(value) =&gt; [`$${value?.toLocaleString()}`, 'Ventas']}&#10;                    contentStyle={{&#10;&#10;                      backgroundColor: 'rgba(255, 255, 255, 0.95)',&#10;                      border: '1px solid #e2e8f0',&#10;                      borderRadius: '8px',&#10;                      boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)'&#10;                    }}&#10;                  /&gt;&#10;                  &lt;Legend /&gt;&#10;                  &lt;Line &#10;                    type=&quot;monotone&quot; &#10;                    dataKey=&quot;real&quot; &#10;                    stroke=&quot;#1976d2&quot; &#10;                    name=&quot;Ventas Reales&quot; &#10;                    strokeWidth={3}&#10;                    dot={{ fill: '#1976d2', strokeWidth: 2, r: 4 }}&#10;                  /&gt;&#10;                  &lt;Line &#10;                    type=&quot;monotone&quot; &#10;                    dataKey=&quot;pronostico&quot; &#10;                    stroke=&quot;#f59e0b&quot; &#10;                    name=&quot;Pronóstico&quot; &#10;                    strokeWidth={3}&#10;                    strokeDasharray=&quot;5 5&quot;&#10;                    dot={{ fill: '#f59e0b', strokeWidth: 2, r: 4 }}&#10;                  /&gt;&#10;                &lt;/LineChart&gt;&#10;              &lt;/ResponsiveContainer&gt;&#10;            &lt;/div&gt;&#10;            &#10;            &lt;div className=&quot;chart-card&quot;&gt;&#10;              &lt;h2 className=&quot;predictivo-title&quot;&gt;Tendencias de Productos&lt;/h2&gt;&#10;              &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;&#10;                &lt;BarChart data={[&#10;                  { producto: 'Laptops', tendencia: 15 },&#10;                  { producto: 'Smartphones', tendencia: 8 },&#10;                  { producto: 'Auriculares', tendencia: 22 },&#10;                  { producto: 'Monitores', tendencia: 12 },&#10;                  { producto: 'Teclados', tendencia: 18 }&#10;                ]} margin={{ top: 20, right: 30, left: 20, bottom: 60 }}&gt;&#10;                  &lt;XAxis &#10;                    dataKey=&quot;producto&quot; &#10;                    stroke=&quot;#1976d2&quot; &#10;                    angle={-45} &#10;                    textAnchor=&quot;end&quot; &#10;                    height={80}&#10;                    fontSize={11}&#10;                  /&gt;&#10;                  &lt;YAxis stroke=&quot;#1976d2&quot; fontSize={12}/&gt;&#10;                  &lt;Tooltip &#10;                    formatter={(value) =&gt; [`${value}%`, 'Crecimiento']}&#10;                    contentStyle={{&#10;                      backgroundColor: 'rgba(255, 255, 255, 0.95)',&#10;                      border: '1px solid #e2e8f0',&#10;                      borderRadius: '8px',&#10;                      boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)'&#10;                    }}&#10;                  /&gt;&#10;                  &lt;Bar &#10;                    dataKey=&quot;tendencia&quot; &#10;                    fill=&quot;#84cc16&quot; &#10;                    name=&quot;Crecimiento Esperado&quot;&#10;                    radius={[4, 4, 0, 0]}&#10;                  /&gt;&#10;                &lt;/BarChart&gt;&#10;              &lt;/ResponsiveContainer&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Métricas de Calidad */}&#10;        &lt;div className=&quot;dashboard-section&quot;&gt;&#10;          &lt;h2 className=&quot;section-title&quot;&gt;&lt;i className=&quot;fas fa-award&quot;&gt;&lt;/i&gt; Métricas de Calidad&lt;/h2&gt;&#10;          &lt;div className=&quot;charts-grid enhanced&quot;&gt;&#10;            &lt;div className=&quot;chart-card&quot;&gt;&#10;              &lt;h2 className=&quot;calidad-title&quot;&gt;Satisfacción del Cliente&lt;/h2&gt;&#10;              &lt;ResponsiveContainer width=&quot;100%&quot; height={300}&gt;&#10;                &lt;LineChart data={[&#10;                  { mes: 'Ene', satisfaccion: 4.2 },&#10;                  { mes: 'Feb', satisfaccion: 4.3 },&#10;                  { mes: 'Mar', satisfaccion: 4.4 },&#10;                  { mes: 'Abr', satisfaccion: 4.5 },&#10;                  { mes: 'May', satisfaccion: 4.6 },&#10;                  { mes: 'Jun', satisfaccion: 4.7 }&#10;                ]} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}&gt;&#10;                  &lt;XAxis dataKey=&quot;mes&quot; stroke=&quot;#1976d2&quot; fontSize={12}/&gt;&#10;                  &lt;YAxis stroke=&quot;#1976d2&quot; fontSize={12} domain={[0, 5]}/&gt;&#10;                  &lt;Tooltip &#10;                    formatter={(value) =&gt; [`${value}/5`, 'Satisfacción']}&#10;                    contentStyle={{&#10;                      backgroundColor: 'rgba(255, 255, 255, 0.95)',&#10;                      border: '1px solid #e2e8f0',&#10;                      borderRadius: '8px',&#10;                      boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)'&#10;                    }}&#10;                  /&gt;&#10;                  &lt;Line &#10;                    type=&quot;monotone&quot; &#10;                    dataKey=&quot;satisfaccion&quot; &#10;                    stroke=&quot;#10b981&quot; &#10;                    name=&quot;Satisfacción&quot; &#10;                    strokeWidth={3}&#10;                    dot={{ fill: '#10b981', strokeWidth: 2, r: 4 }}&#10;                  /&gt;&#10;                &lt;/LineChart&gt;&#10;              &lt;/ResponsiveContainer&gt;&#10;            &lt;/div&gt;&#10;            &#10;            &lt;div className=&quot;table-card&quot;&gt;&#10;              &lt;h2 className=&quot;calidad-title&quot;&gt;Productos con Más Devoluciones&lt;/h2&gt;&#10;              &lt;table&gt;&#10;                &lt;thead&gt;&#10;                  &lt;tr&gt;&#10;                    &lt;th&gt;Producto&lt;/th&gt;&#10;                    &lt;th&gt;Devoluciones&lt;/th&gt;&#10;                    &lt;th&gt;% del Total&lt;/th&gt;&#10;                    &lt;th&gt;Motivo Principal&lt;/th&gt;&#10;                  &lt;/tr&gt;&#10;                &lt;/thead&gt;&#10;                &lt;tbody&gt;&#10;                  &lt;tr&gt;&#10;                    &lt;td&gt;Auriculares Bluetooth&lt;/td&gt;&#10;                    &lt;td&gt;8&lt;/td&gt;&#10;                    &lt;td&gt;2.1%&lt;/td&gt;&#10;                    &lt;td&gt;Defecto de fábrica&lt;/td&gt;&#10;                  &lt;/tr&gt;&#10;                  &lt;tr&gt;&#10;                    &lt;td&gt;Mouse Gaming&lt;/td&gt;&#10;                    &lt;td&gt;6&lt;/td&gt;&#10;                    &lt;td&gt;1.8%&lt;/td&gt;&#10;                    &lt;td&gt;No cumple expectativas&lt;/td&gt;&#10;                  &lt;/tr&gt;&#10;                  &lt;tr&gt;&#10;                    &lt;td&gt;Teclado Mecánico&lt;/td&gt;&#10;                    &lt;td&gt;5&lt;/td&gt;&#10;                    &lt;td&gt;1.5%&lt;/td&gt;&#10;                    &lt;td&gt;Ruido excesivo&lt;/td&gt;&#10;                  &lt;/tr&gt;&#10;                  &lt;tr&gt;&#10;                    &lt;td&gt;Monitor 4K&lt;/td&gt;&#10;                    &lt;td&gt;4&lt;/td&gt;&#10;                    &lt;td&gt;1.2%&lt;/td&gt;&#10;                    &lt;td&gt;Píxeles muertos&lt;/td&gt;&#10;                  &lt;/tr&gt;&#10;                &lt;/tbody&gt;&#10;              &lt;/table&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        {/* Separador visual */}&#10;        &lt;hr className=&quot;dashboard-separator&quot; /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/Layout&gt;&#10;  );&#10;};&#10;&#10;export default DashboardPage;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { useLocation, useNavigate } from 'react-router-dom';&#10;import Layout from '../components/Layout';&#10;import '../styles/DashboardPage.css';&#10;import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line, Legend } from 'recharts';&#10;import { Tooltip as ReactTooltip } from 'react-tooltip';&#10;import IndicadoresWidget from '../components/IndicadoresWidget';&#10;import authService from '../services/authService';&#10;&#10;const DashboardPage = () =&gt; {&#10;  const [fechaInicio, setFechaInicio] = useState('');&#10;  const [fechaFin, setFechaFin] = useState('');&#10;  const [dashboardData, setDashboardData] = useState(null);&#10;  const [productosMasVendidos, setProductosMasVendidos] = useState([]);&#10;  const [ingresosPorMes, setIngresosPorMes] = useState([]);&#10;  const [pedidosPorEstado, setPedidosPorEstado] = useState([]);&#10;  const [clientesNuevosPorMes, setClientesNuevosPorMes] = useState([]);&#10;  const [alertasStock, setAlertasStock] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState('');&#10;  const [datosReales, setDatosReales] = useState({});&#10;  const location = useLocation();&#10;  const navigate = useNavigate();&#10;&#10;  // Capturar tokens de la URL si vienen de OAuth&#10;  useEffect(() =&gt; {&#10;    console.log('DashboardPage - URL actual:', location.search);&#10;    const urlParams = new URLSearchParams(location.search);&#10;    const token = urlParams.get('token');&#10;    const refreshToken = urlParams.get('refreshToken');&#10;&#10;    console.log('DashboardPage - Token encontrado:', !!token);&#10;    console.log('DashboardPage - RefreshToken encontrado:', !!refreshToken);&#10;&#10;    if (token &amp;&amp; refreshToken) {&#10;      console.log('DashboardPage - Guardando tokens en localStorage');&#10;      // Guardar tokens en localStorage&#10;      localStorage.setItem('jwt', token);&#10;      localStorage.setItem('refreshToken', refreshToken);&#10;      &#10;      // Limpiar la URL&#10;      navigate('/dashboard', { replace: true });&#10;    } else {&#10;      console.log('DashboardPage - No se encontraron tokens en la URL');&#10;    }&#10;  }, [location, navigate]);&#10;&#10;  // Verificar si el usuario está autenticado&#10;  useEffect(() =&gt; {&#10;    const token = localStorage.getItem('jwt');&#10;    // Solo redirigir si no hay token y no estamos ya en /login&#10;    if (!token &amp;&amp; location.pathname !== '/login') {&#10;      navigate('/login', { replace: true });&#10;    }&#10;  }, [navigate, location.pathname]);&#10;&#10;  const fetchDashboardData = async () =&gt; {&#10;    setLoading(true);&#10;    setError('');&#10;    &#10;    try {&#10;      const token = localStorage.getItem('jwt');&#10;      const headers = { 'Authorization': `Bearer ${token}` };&#10;&#10;      // Dashboard general&#10;      const dashboardRes = await fetch('http://localhost:8081/api/reportes/dashboard', { headers });&#10;      if (dashboardRes.ok) {&#10;        const data = await dashboardRes.json();&#10;        setDashboardData(data);&#10;        console.log('Dashboard data:', data);&#10;      } else {&#10;        console.error('Error fetching dashboard:', dashboardRes.status);&#10;      }&#10;&#10;      // Productos más vendidos&#10;      const productosRes = await fetch('http://localhost:8081/api/reportes/ventas/productos-mas-vendidos', { headers });&#10;      if (productosRes.ok) {&#10;        const data = await productosRes.json();&#10;        setProductosMasVendidos(data || []);&#10;        console.log('Productos más vendidos:', data);&#10;      } else {&#10;        console.error('Error fetching productos:', productosRes.status);&#10;      }&#10;&#10;      // Ingresos por mes&#10;      const ingresosRes = await fetch('http://localhost:8081/api/reportes/ingresos-por-mes', { headers });&#10;      if (ingresosRes.ok) {&#10;        const data = await ingresosRes.json();&#10;        setIngresosPorMes(data || []);&#10;        console.log('Ingresos por mes:', data);&#10;      } else {&#10;        console.error('Error fetching ingresos:', ingresosRes.status);&#10;      }&#10;&#10;      // Pedidos por estado&#10;      const pedidosRes = await fetch('http://localhost:8081/api/reportes/pedidos-por-estado', { headers });&#10;      if (pedidosRes.ok) {&#10;        const data = await pedidosRes.json();&#10;        setPedidosPorEstado(data || []);&#10;        console.log('Pedidos por estado:', data);&#10;      } else {&#10;        console.error('Error fetching pedidos por estado:', pedidosRes.status);&#10;      }&#10;&#10;      // Clientes nuevos por mes&#10;      const clientesRes = await fetch('http://localhost:8081/api/reportes/clientes-nuevos-por-mes', { headers });&#10;      if (clientesRes.ok) {&#10;        const data = await clientesRes.json();&#10;        setClientesNuevosPorMes(data || []);&#10;        console.log('Clientes nuevos por mes:', data);&#10;      } else {&#10;        console.error('Error fetching clientes:', clientesRes.status);&#10;      }&#10;&#10;      // Alertas de stock bajo&#10;      const stockRes = await fetch('http://localhost:8081/api/reportes/inventario/stock-bajo', { headers });&#10;      if (stockRes.ok) {&#10;        const data = await stockRes.json();&#10;        setAlertasStock(data || []);&#10;        console.log('Alertas de stock:', data);&#10;      } else {&#10;        console.error('Error fetching stock bajo:', stockRes.status);&#10;      }&#10;&#10;      // Obtener datos adicionales reales&#10;      await fetchDatosReales(headers);&#10;&#10;    } catch (err) {&#10;      console.error('Error en fetchDashboardData:', err);&#10;      setError('Error al cargar los datos del dashboard: ' + err.message);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  // Función para obtener datos reales adicionales&#10;  const fetchDatosReales = async (headers) =&gt; {&#10;    try {&#10;      // Obtener total de clientes real&#10;      const clientesRes = await fetch('http://localhost:8081/api/clientes', { headers });&#10;      if (clientesRes.ok) {&#10;        const clientes = await clientesRes.json();&#10;        setDatosReales(prev =&gt; ({ ...prev, totalClientes: clientes.length }));&#10;      }&#10;&#10;      // Obtener total de productos real&#10;      const productosRes = await fetch('http://localhost:8081/api/productos', { headers });&#10;      if (productosRes.ok) {&#10;        const productos = await productosRes.json();&#10;        setDatosReales(prev =&gt; ({ ...prev, totalProductos: productos.length }));&#10;      }&#10;&#10;      // Obtener total de proveedores real&#10;      const proveedoresRes = await fetch('http://localhost:8081/api/proveedores', { headers });&#10;      if (proveedoresRes.ok) {&#10;        const proveedores = await proveedoresRes.json();&#10;        setDatosReales(prev =&gt; ({ ...prev, totalProveedores: proveedores.length }));&#10;      }&#10;&#10;      // Obtener pedidos reales para análisis&#10;      const pedidosRes = await fetch('http://localhost:8081/api/pedidos', { headers });&#10;      if (pedidosRes.ok) {&#10;        const pedidos = await pedidosRes.json();&#10;        setDatosReales(prev =&gt; ({ ...prev, pedidos: pedidos }));&#10;      }&#10;&#10;    } catch (err) {&#10;      console.error('Error obteniendo datos reales:', err);&#10;    }&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    fetchDashboardData();&#10;  }, []);&#10;&#10;  const handleFiltrar = () =&gt; {&#10;    // Aquí se implementaría la lógica de filtrado&#10;    console.log('Filtrando desde:', fechaInicio, 'hasta:', fechaFin);&#10;    fetchDashboardData(); // Recargar datos con filtros&#10;  };&#10;&#10;  // Colores para PieChart&#10;  const pieColors = ['#1976d2', '#10b981', '#fbc02d', '#e53935', '#ff9800', '#8e24aa'];&#10;&#10;  // Utilidad para iconos y colores por estado&#10;  const estadoConfig = {&#10;    'Pendiente': { icon: '', color: '#fbc02d' },&#10;    'PENDIENTE': { icon: '', color: '#fbc02d' },&#10;    'Enviado': { icon: '', color: '#1976d2' },&#10;    'ENVIADO': { icon: '', color: '#1976d2' },&#10;    'Entregado': { icon: '✅', color: '#10b981' },&#10;    'ENTREGADO': { icon: '✅', color: '#10b981' },&#10;    'Cancelado': { icon: '❌', color: '#e53935' },&#10;    'CANCELADO': { icon: '❌', color: '#e53935' },&#10;    'Completado': { icon: '✔️', color: '#43a047' },&#10;    'completado': { icon: '✔️', color: '#43a047' },&#10;    'pendiente': { icon: '', color: '#fbc02d' },&#10;    // Otros estados...&#10;  };&#10;&#10;  // Calcular total de pedidos&#10;  const totalPedidos = pedidosPorEstado.reduce((acc, p) =&gt; acc + (p.cantidad || 0), 0);&#10;&#10;  // Agrupar estados ignorando mayúsculas/minúsculas&#10;  const groupedEstados = pedidosPorEstado.reduce((acc, curr) =&gt; {&#10;    const key = curr.estado.trim().toLowerCase();&#10;    if (!acc[key]) {&#10;      acc[key] = { ...curr, estado: curr.estado.charAt(0).toUpperCase() + curr.estado.slice(1).toLowerCase(), cantidad: 0 };&#10;    }&#10;    acc[key].cantidad += curr.cantidad;&#10;    return acc;&#10;  }, {});&#10;  const estadosUnicos = Object.values(groupedEstados);&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;Layout title=&quot;Dashboard&quot; subtitle=&quot;Cargando datos...&quot;&gt;&#10;        &lt;div className=&quot;dashboard-container&quot;&gt;&#10;          &lt;div className=&quot;loading-spinner&quot;&gt;&#10;            &lt;i className=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;/i&gt;&#10;            &lt;p&gt;Cargando dashboard...&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/Layout&gt;&#10;    );&#10;  }&#10;&#10;  if (error) {&#10;    return (&#10;      &lt;Layout title=&quot;Dashboard&quot; subtitle=&quot;Error&quot;&gt;&#10;        &lt;div className=&quot;dashboard-container&quot;&gt;&#10;          &lt;div className=&quot;error-message&quot;&gt;&#10;            &lt;i className=&quot;fas fa-exclamation-triangle&quot;&gt;&lt;/i&gt;&#10;            &lt;p&gt;{error}&lt;/p&gt;&#10;            &lt;button onClick={fetchDashboardData}&gt;Reintentar&lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/Layout&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;Layout title=&quot;Dashboard&quot; subtitle=&quot;Métricas y Reportes del Sistema&quot;&gt;&#10;      &lt;div className=&quot;dashboard-container&quot;&gt;&#10;        &lt;IndicadoresWidget /&gt;&#10;        {/* Filtro de fechas */}&#10;        &lt;div className=&quot;filter-section&quot;&gt;&#10;          &lt;h2&gt;Filtrar por Fechas&lt;/h2&gt;&#10;          &lt;div className=&quot;filter-grid&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;fecha-inicio&quot;&gt;Fecha Inicio:&lt;/label&gt;&#10;              &lt;input&#10;                type=&quot;date&quot;&#10;                id=&quot;fecha-inicio&quot;&#10;                value={fechaInicio}&#10;                onChange={(e) =&gt; setFechaInicio(e.target.value)}&#10;              /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;              &lt;label htmlFor=&quot;fecha-fin&quot;&gt;Fecha Fin:&lt;/label&gt;&#10;              &lt;input&#10;                type=&quot;date&quot;&#10;                id=&quot;fecha-fin&quot;&#10;                value={fechaFin}&#10;                onChange={(e) =&gt; setFechaFin(e.target.value)}&#10;              /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;filter-button&quot;&gt;&#10;              &lt;button onClick={handleFiltrar}&gt;Filtrar&lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Resto del componente dashboard - mantiene la estructura original */}&#10;        &lt;div className=&quot;stats-grid&quot;&gt;&#10;          {/* Tarjetas de estadísticas básicas para mantener funcionalidad */}&#10;          &lt;div className=&quot;stat-card blue&quot;&gt;&#10;            &lt;div className=&quot;stat-content&quot;&gt;&#10;              &lt;p className=&quot;stat-main-value&quot;&gt;${(dashboardData?.ventasMes || 0).toLocaleString()}&lt;/p&gt;&#10;              &lt;p className=&quot;stat-label&quot;&gt;Ventas del Mes&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;stat-card green&quot;&gt;&#10;            &lt;div className=&quot;stat-content&quot;&gt;&#10;              &lt;p className=&quot;stat-main-value&quot;&gt;{dashboardData?.pedidosPendientes || 0}&lt;/p&gt;&#10;              &lt;p className=&quot;stat-label&quot;&gt;Pedidos Pendientes&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Tablas básicas */}&#10;        &lt;div className=&quot;tables-grid&quot;&gt;&#10;          &lt;div className=&quot;table-card&quot;&gt;&#10;            &lt;h2&gt;Productos Más Vendidos&lt;/h2&gt;&#10;            &lt;table&gt;&#10;              &lt;thead&gt;&#10;                &lt;tr&gt;&#10;                  &lt;th&gt;Producto&lt;/th&gt;&#10;                  &lt;th&gt;Precio&lt;/th&gt;&#10;                  &lt;th&gt;Cantidad Vendida&lt;/th&gt;&#10;                  &lt;th&gt;Ingreso Total&lt;/th&gt;&#10;                &lt;/tr&gt;&#10;              &lt;/thead&gt;&#10;              &lt;tbody&gt;&#10;                {productosMasVendidos.length &gt; 0 ? (&#10;                  productosMasVendidos.map((producto, index) =&gt; (&#10;                    &lt;tr key={index}&gt;&#10;                      &lt;td&gt;{producto.nombre}&lt;/td&gt;&#10;                      &lt;td&gt;${producto.precio?.toFixed(2) || '0.00'}&lt;/td&gt;&#10;                      &lt;td&gt;{producto.cantidadVendida}&lt;/td&gt;&#10;                      &lt;td&gt;${producto.ingreso?.toFixed(2) || '0.00'}&lt;/td&gt;&#10;                    &lt;/tr&gt;&#10;                  ))&#10;                ) : (&#10;                  &lt;tr&gt;&lt;td colSpan=&quot;4&quot;&gt;No hay datos de productos vendidos.&lt;/td&gt;&lt;/tr&gt;&#10;                )}&#10;              &lt;/tbody&gt;&#10;            &lt;/table&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/Layout&gt;&#10;  );&#10;};&#10;&#10;export default DashboardPage;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend-erp/src/services/authService.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend-erp/src/services/authService.js" />
              <option name="originalContent" value="    // Verificar cookies como respaldo&#10;    const tokenFromCookie = this.getCookie('jwt');&#10;    const refreshTokenFromCookie = this.getCookie('refreshToken');&#10;&#10;    if (tokenFromCookie &amp;&amp; refreshTokenFromCookie) {&#10;      console.log('Tokens encontrados en cookies, guardando en localStorage');&#10;      localStorage.setItem('jwt', tokenFromCookie);&#10;      localStorage.setItem('refreshToken', refreshTokenFromCookie);&#10;      return true;&#10;    }&#10;&#10;    return false;&#10;  }&#10;&#10;  // Función auxiliar para leer cookies&#10;  getCookie(name) {&#10;    const value = `; ${document.cookie}`;&#10;    const parts = value.split(`; ${name}=`);&#10;    if (parts.length === 2) return parts.pop().split(';').shift();&#10;    return null;&#10;  }&#10;const API_BASE_URL = 'http://localhost:8081/api';&#10;&#10;export default new AuthService();&#10;  constructor() {&#10;    this.isRefreshing = false;&#10;    this.failedQueue = [];&#10;  }&#10;&#10;  // Procesar la cola de peticiones fallidas&#10;  processQueue(error, token = null) {&#10;    this.failedQueue.forEach(prom =&gt; {&#10;      if (error) {&#10;        prom.reject(error);&#10;      } else {&#10;        prom.resolve(token);&#10;      }&#10;    });&#10;    &#10;    this.failedQueue = [];&#10;  }&#10;&#10;  // Obtener headers de autenticación&#10;  getAuthHeaders() {&#10;    const token = localStorage.getItem('jwt');&#10;    return {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': token ? `Bearer ${token}` : ''&#10;    };&#10;  }&#10;&#10;  // Login&#10;  async login(email, password, recaptchaToken) {&#10;    try {&#10;      const response = await fetch(`${API_BASE_URL}/auth/login`, {&#10;        method: 'POST',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;        },&#10;        body: JSON.stringify({&#10;          correo: email,&#10;          password: password,&#10;          'recaptcha-token': recaptchaToken&#10;        })&#10;      });&#10;&#10;      if (!response.ok) {&#10;        throw new Error('Credenciales incorrectas');&#10;      }&#10;&#10;      const data = await response.json();&#10;      &#10;      // Guardar tokens&#10;      localStorage.setItem('jwt', data.token);&#10;      localStorage.setItem('refreshToken', data.refreshToken);&#10;      // Guardar usuario completo (incluyendo avatar)&#10;      if (data.user) {&#10;        localStorage.setItem('user', JSON.stringify(data.user));&#10;      }&#10;      return data;&#10;    } catch (error) {&#10;      console.error('Error en login:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  // Obtener usuario actual&#10;  async getCurrentUser() {&#10;    try {&#10;      const response = await fetch(`${API_BASE_URL}/auth/me`, {&#10;        headers: this.getAuthHeaders()&#10;      });&#10;&#10;      if (!response.ok) {&#10;        throw new Error('No se pudo obtener información del usuario');&#10;      }&#10;&#10;      const userData = await response.json();&#10;      localStorage.setItem('user', JSON.stringify(userData));&#10;      return userData;&#10;    } catch (error) {&#10;      console.error('Error obteniendo usuario:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  // Refrescar token&#10;  async refreshToken() {&#10;    if (this.isRefreshing) {&#10;      return new Promise((resolve, reject) =&gt; {&#10;        this.failedQueue.push({ resolve, reject });&#10;      });&#10;    }&#10;&#10;    this.isRefreshing = true;&#10;&#10;    try {&#10;      const refreshToken = localStorage.getItem('refreshToken');&#10;      if (!refreshToken) {&#10;        throw new Error('No hay refresh token disponible');&#10;      }&#10;&#10;      const response = await fetch(`${API_BASE_URL}/auth/refresh`, {&#10;        method: 'POST',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;        },&#10;        body: JSON.stringify({&#10;          refreshToken: refreshToken&#10;        })&#10;      });&#10;&#10;      if (!response.ok) {&#10;        throw new Error('Refresh token inválido o expirado');&#10;      }&#10;&#10;      const data = await response.json();&#10;      &#10;      // Actualizar tokens&#10;      localStorage.setItem('jwt', data.token);&#10;      localStorage.setItem('refreshToken', data.refreshToken);&#10;      &#10;      this.processQueue(null, data.token);&#10;      return data.token;&#10;    } catch (error) {&#10;      this.processQueue(error, null);&#10;      throw error;&#10;    } finally {&#10;      this.isRefreshing = false;&#10;    }&#10;  }&#10;&#10;  // Logout&#10;  async logout() {&#10;    try {&#10;      const refreshToken = localStorage.getItem('refreshToken');&#10;      if (refreshToken) {&#10;        await fetch(`${API_BASE_URL}/auth/logout`, {&#10;          method: 'POST',&#10;          headers: {&#10;            'Content-Type': 'application/json',&#10;          },&#10;          body: JSON.stringify({&#10;            refreshToken: refreshToken&#10;          })&#10;        });&#10;      }&#10;    } catch (error) {&#10;      console.error('Error en logout:', error);&#10;    } finally {&#10;      // Limpiar localStorage&#10;      localStorage.removeItem('jwt');&#10;      localStorage.removeItem('refreshToken');&#10;      localStorage.removeItem('user');&#10;    }&#10;  }&#10;&#10;  // Verificar si está autenticado&#10;  isAuthenticated() {&#10;    const token = localStorage.getItem('jwt');&#10;    if (!token) {&#10;      return false;&#10;    }&#10;    try {&#10;      const tokenData = JSON.parse(atob(token.split('.')[1]));&#10;      const currentTime = Date.now() / 1000;&#10;      if (tokenData.exp &lt; currentTime) {&#10;        this.logout();&#10;        return false;&#10;      }&#10;      return true;&#10;    } catch (error) {&#10;      this.logout();&#10;      return false;&#10;    }&#10;  }&#10;&#10;  // Hacer petición con manejo automático de token expirado&#10;  async authenticatedRequest(url, options = {}) {&#10;    try {&#10;      // Primera petición&#10;      const response = await fetch(url, {&#10;        ...options,&#10;        headers: {&#10;          ...this.getAuthHeaders(),&#10;          ...options.headers&#10;        }&#10;      });&#10;&#10;      // Si la petición es exitosa, retornar la respuesta&#10;      if (response.ok) {&#10;        return response;&#10;      }&#10;&#10;      // Si es 401 (no autorizado), intentar refrescar el token&#10;      if (response.status === 401) {&#10;        try {&#10;          await this.refreshToken();&#10;          &#10;          // Reintentar la petición con el nuevo token&#10;          const retryResponse = await fetch(url, {&#10;            ...options,&#10;            headers: {&#10;              ...this.getAuthHeaders(),&#10;              ...options.headers&#10;            }&#10;          });&#10;&#10;          if (retryResponse.ok) {&#10;            return retryResponse;&#10;          } else {&#10;            // Si sigue fallando, hacer logout&#10;            await this.logout();&#10;            throw new Error('Sesión expirada');&#10;          }&#10;        } catch (refreshError) {&#10;          await this.logout();&#10;          throw new Error('Sesión expirada');&#10;        }&#10;      }&#10;&#10;      return response;&#10;    } catch (error) {&#10;      console.error('Error en petición autenticada:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  // Procesar tokens de OAuth2 desde URL o cookies&#10;  processOAuthTokens() {&#10;    // Verificar si hay tokens en la URL (parámetros de consulta)&#10;    const urlParams = new URLSearchParams(window.location.search);&#10;    const tokenFromUrl = urlParams.get('token');&#10;    const refreshTokenFromUrl = urlParams.get('refreshToken');&#10;&#10;    if (tokenFromUrl &amp;&amp; refreshTokenFromUrl) {&#10;      console.log('Tokens encontrados en URL, guardando en localStorage');&#10;      localStorage.setItem('jwt', tokenFromUrl);&#10;      localStorage.setItem('refreshToken', refreshTokenFromUrl);&#10;&#10;      // Limpiar los parámetros de la URL&#10;      const url = new URL(window.location);&#10;      url.searchParams.delete('token');&#10;      url.searchParams.delete('refreshToken');&#10;      window.history.replaceState({}, document.title, url.pathname + url.search);&#10;&#10;      return true;&#10;    }&#10;&#10;}&#10;&#10;export default new AuthService(); " />
              <option name="updatedContent" value="const API_BASE_URL = 'http://localhost:8081/api';&#10;&#10;class AuthService {&#10;  constructor() {&#10;    this.isRefreshing = false;&#10;    this.failedQueue = [];&#10;  }&#10;&#10;  // Procesar la cola de peticiones fallidas&#10;  processQueue(error, token = null) {&#10;    this.failedQueue.forEach(prom =&gt; {&#10;      if (error) {&#10;        prom.reject(error);&#10;      } else {&#10;        prom.resolve(token);&#10;      }&#10;    });&#10;    &#10;    this.failedQueue = [];&#10;  }&#10;&#10;  // Obtener headers de autenticación&#10;  getAuthHeaders() {&#10;    const token = localStorage.getItem('jwt');&#10;    return {&#10;      'Content-Type': 'application/json',&#10;      'Authorization': token ? `Bearer ${token}` : ''&#10;    };&#10;  }&#10;&#10;  // Login&#10;  async login(email, password, recaptchaToken) {&#10;    try {&#10;      const response = await fetch(`${API_BASE_URL}/auth/login`, {&#10;        method: 'POST',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;        },&#10;        body: JSON.stringify({&#10;          correo: email,&#10;          password: password,&#10;          'recaptcha-token': recaptchaToken&#10;        })&#10;      });&#10;&#10;      if (!response.ok) {&#10;        throw new Error('Credenciales incorrectas');&#10;      }&#10;&#10;      const data = await response.json();&#10;      &#10;      // Guardar tokens&#10;      localStorage.setItem('jwt', data.token);&#10;      localStorage.setItem('refreshToken', data.refreshToken);&#10;      // Guardar usuario completo (incluyendo avatar)&#10;      if (data.user) {&#10;        localStorage.setItem('user', JSON.stringify(data.user));&#10;      }&#10;      return data;&#10;    } catch (error) {&#10;      console.error('Error en login:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  // Obtener usuario actual&#10;  async getCurrentUser() {&#10;    try {&#10;      const response = await fetch(`${API_BASE_URL}/auth/me`, {&#10;        headers: this.getAuthHeaders()&#10;      });&#10;&#10;      if (!response.ok) {&#10;        throw new Error('No se pudo obtener información del usuario');&#10;      }&#10;&#10;      const userData = await response.json();&#10;      localStorage.setItem('user', JSON.stringify(userData));&#10;      return userData;&#10;    } catch (error) {&#10;      console.error('Error obteniendo usuario:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  // Refrescar token&#10;  async refreshToken() {&#10;    if (this.isRefreshing) {&#10;      return new Promise((resolve, reject) =&gt; {&#10;        this.failedQueue.push({ resolve, reject });&#10;      });&#10;    }&#10;&#10;    this.isRefreshing = true;&#10;&#10;    try {&#10;      const refreshToken = localStorage.getItem('refreshToken');&#10;      if (!refreshToken) {&#10;        throw new Error('No hay refresh token disponible');&#10;      }&#10;&#10;      const response = await fetch(`${API_BASE_URL}/auth/refresh`, {&#10;        method: 'POST',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;        },&#10;        body: JSON.stringify({&#10;          refreshToken: refreshToken&#10;        })&#10;      });&#10;&#10;      if (!response.ok) {&#10;        throw new Error('Refresh token inválido o expirado');&#10;      }&#10;&#10;      const data = await response.json();&#10;      &#10;      // Actualizar tokens&#10;      localStorage.setItem('jwt', data.token);&#10;      localStorage.setItem('refreshToken', data.refreshToken);&#10;      &#10;      this.processQueue(null, data.token);&#10;      return data.token;&#10;    } catch (error) {&#10;      this.processQueue(error, null);&#10;      throw error;&#10;    } finally {&#10;      this.isRefreshing = false;&#10;    }&#10;  }&#10;&#10;  // Logout&#10;  async logout() {&#10;    try {&#10;      const refreshToken = localStorage.getItem('refreshToken');&#10;      if (refreshToken) {&#10;        await fetch(`${API_BASE_URL}/auth/logout`, {&#10;          method: 'POST',&#10;          headers: {&#10;            'Content-Type': 'application/json',&#10;          },&#10;          body: JSON.stringify({&#10;            refreshToken: refreshToken&#10;          })&#10;        });&#10;      }&#10;    } catch (error) {&#10;      console.error('Error en logout:', error);&#10;    } finally {&#10;      // Limpiar localStorage&#10;      localStorage.removeItem('jwt');&#10;      localStorage.removeItem('refreshToken');&#10;      localStorage.removeItem('user');&#10;    }&#10;  }&#10;&#10;  // Verificar si está autenticado&#10;  isAuthenticated() {&#10;    const token = localStorage.getItem('jwt');&#10;    if (!token) {&#10;      return false;&#10;    }&#10;    try {&#10;      const tokenData = JSON.parse(atob(token.split('.')[1]));&#10;      const currentTime = Date.now() / 1000;&#10;      if (tokenData.exp &lt; currentTime) {&#10;        this.logout();&#10;        return false;&#10;      }&#10;      return true;&#10;    } catch (error) {&#10;      this.logout();&#10;      return false;&#10;    }&#10;  }&#10;&#10;  // Hacer petición con manejo automático de token expirado&#10;  async authenticatedRequest(url, options = {}) {&#10;    try {&#10;      // Primera petición&#10;      const response = await fetch(url, {&#10;        ...options,&#10;        headers: {&#10;          ...this.getAuthHeaders(),&#10;          ...options.headers&#10;        }&#10;      });&#10;&#10;      // Si la petición es exitosa, retornar la respuesta&#10;      if (response.ok) {&#10;        return response;&#10;      }&#10;&#10;      // Si es 401 (no autorizado), intentar refrescar el token&#10;      if (response.status === 401) {&#10;        try {&#10;          await this.refreshToken();&#10;          &#10;          // Reintentar la petición con el nuevo token&#10;          const retryResponse = await fetch(url, {&#10;            ...options,&#10;            headers: {&#10;              ...this.getAuthHeaders(),&#10;              ...options.headers&#10;            }&#10;          });&#10;&#10;          if (retryResponse.ok) {&#10;            return retryResponse;&#10;          } else {&#10;            // Si sigue fallando, hacer logout&#10;            await this.logout();&#10;            throw new Error('Sesión expirada');&#10;          }&#10;        } catch (refreshError) {&#10;          await this.logout();&#10;          throw new Error('Sesión expirada');&#10;        }&#10;      }&#10;&#10;      return response;&#10;    } catch (error) {&#10;      console.error('Error en petición autenticada:', error);&#10;      throw error;&#10;    }&#10;  }&#10;&#10;  // Procesar tokens de OAuth2 desde URL o cookies&#10;  processOAuthTokens() {&#10;    // Verificar si hay tokens en la URL (parámetros de consulta)&#10;    const urlParams = new URLSearchParams(window.location.search);&#10;    const tokenFromUrl = urlParams.get('token');&#10;    const refreshTokenFromUrl = urlParams.get('refreshToken');&#10;    &#10;    if (tokenFromUrl &amp;&amp; refreshTokenFromUrl) {&#10;      console.log('Tokens encontrados en URL, guardando en localStorage');&#10;      localStorage.setItem('jwt', tokenFromUrl);&#10;      localStorage.setItem('refreshToken', refreshTokenFromUrl);&#10;      &#10;      // Limpiar los parámetros de la URL&#10;      const url = new URL(window.location);&#10;      url.searchParams.delete('token');&#10;      url.searchParams.delete('refreshToken');&#10;      window.history.replaceState({}, document.title, url.pathname + url.search);&#10;      &#10;      return true;&#10;    }&#10;    &#10;    // Verificar cookies como respaldo&#10;    const tokenFromCookie = this.getCookie('jwt');&#10;    const refreshTokenFromCookie = this.getCookie('refreshToken');&#10;    &#10;    if (tokenFromCookie &amp;&amp; refreshTokenFromCookie) {&#10;      console.log('Tokens encontrados en cookies, guardando en localStorage');&#10;      localStorage.setItem('jwt', tokenFromCookie);&#10;      localStorage.setItem('refreshToken', refreshTokenFromCookie);&#10;      return true;&#10;    }&#10;    &#10;    return false;&#10;  }&#10;&#10;  // Función auxiliar para leer cookies&#10;  getCookie(name) {&#10;    const value = `; ${document.cookie}`;&#10;    const parts = value.split(`; ${name}=`);&#10;    if (parts.length === 2) return parts.pop().split(';').shift();&#10;    return null;&#10;  }&#10;}&#10;&#10;export default new AuthService();" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>